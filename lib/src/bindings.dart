// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// WebGPU exposes an API for performing operations, such as rendering and computation, on a Graphics Processing Unit.
class LibWebGPU {
  /// Holds the Dynamic library.
  final ffi.DynamicLibrary _dylib;

  /// The symbols are looked up in [dynamicLibrary].
  LibWebGPU(ffi.DynamicLibrary dynamicLibrary) : _dylib = dynamicLibrary;

  ffi.Pointer<WGPUInstanceImpl> wgpuCreateInstance(
    ffi.Pointer<WGPUInstanceDescriptor> descriptor,
  ) {
    _wgpuCreateInstance ??=
        _dylib.lookupFunction<_c_wgpuCreateInstance, _dart_wgpuCreateInstance>(
            'wgpuCreateInstance');
    return _wgpuCreateInstance(
      descriptor,
    );
  }

  _dart_wgpuCreateInstance _wgpuCreateInstance;

  ffi.Pointer<ffi.NativeFunction<WGPUProc>> wgpuGetProcAddress(
    ffi.Pointer<WGPUDeviceImpl> device,
    ffi.Pointer<ffi.Int8> procName,
  ) {
    _wgpuGetProcAddress ??=
        _dylib.lookupFunction<_c_wgpuGetProcAddress, _dart_wgpuGetProcAddress>(
            'wgpuGetProcAddress');
    return _wgpuGetProcAddress(
      device,
      procName,
    );
  }

  _dart_wgpuGetProcAddress _wgpuGetProcAddress;

  void wgpuBindGroupReference(
    ffi.Pointer<WGPUBindGroupImpl> bindGroup,
  ) {
    _wgpuBindGroupReference ??= _dylib.lookupFunction<_c_wgpuBindGroupReference,
        _dart_wgpuBindGroupReference>('wgpuBindGroupReference');
    return _wgpuBindGroupReference(
      bindGroup,
    );
  }

  _dart_wgpuBindGroupReference _wgpuBindGroupReference;

  void wgpuBindGroupRelease(
    ffi.Pointer<WGPUBindGroupImpl> bindGroup,
  ) {
    _wgpuBindGroupRelease ??= _dylib.lookupFunction<_c_wgpuBindGroupRelease,
        _dart_wgpuBindGroupRelease>('wgpuBindGroupRelease');
    return _wgpuBindGroupRelease(
      bindGroup,
    );
  }

  _dart_wgpuBindGroupRelease _wgpuBindGroupRelease;

  void wgpuBindGroupLayoutReference(
    ffi.Pointer<WGPUBindGroupLayoutImpl> bindGroupLayout,
  ) {
    _wgpuBindGroupLayoutReference ??= _dylib.lookupFunction<
        _c_wgpuBindGroupLayoutReference,
        _dart_wgpuBindGroupLayoutReference>('wgpuBindGroupLayoutReference');
    return _wgpuBindGroupLayoutReference(
      bindGroupLayout,
    );
  }

  _dart_wgpuBindGroupLayoutReference _wgpuBindGroupLayoutReference;

  void wgpuBindGroupLayoutRelease(
    ffi.Pointer<WGPUBindGroupLayoutImpl> bindGroupLayout,
  ) {
    _wgpuBindGroupLayoutRelease ??= _dylib.lookupFunction<
        _c_wgpuBindGroupLayoutRelease,
        _dart_wgpuBindGroupLayoutRelease>('wgpuBindGroupLayoutRelease');
    return _wgpuBindGroupLayoutRelease(
      bindGroupLayout,
    );
  }

  _dart_wgpuBindGroupLayoutRelease _wgpuBindGroupLayoutRelease;

  void wgpuBufferDestroy(
    ffi.Pointer<WGPUBufferImpl> buffer,
  ) {
    _wgpuBufferDestroy ??=
        _dylib.lookupFunction<_c_wgpuBufferDestroy, _dart_wgpuBufferDestroy>(
            'wgpuBufferDestroy');
    return _wgpuBufferDestroy(
      buffer,
    );
  }

  _dart_wgpuBufferDestroy _wgpuBufferDestroy;

  ffi.Pointer<ffi.Void> wgpuBufferGetConstMappedRange(
    ffi.Pointer<WGPUBufferImpl> buffer,
    int offset,
    int size,
  ) {
    _wgpuBufferGetConstMappedRange ??= _dylib.lookupFunction<
        _c_wgpuBufferGetConstMappedRange,
        _dart_wgpuBufferGetConstMappedRange>('wgpuBufferGetConstMappedRange');
    return _wgpuBufferGetConstMappedRange(
      buffer,
      offset,
      size,
    );
  }

  _dart_wgpuBufferGetConstMappedRange _wgpuBufferGetConstMappedRange;

  ffi.Pointer<ffi.Void> wgpuBufferGetMappedRange(
    ffi.Pointer<WGPUBufferImpl> buffer,
    int offset,
    int size,
  ) {
    _wgpuBufferGetMappedRange ??= _dylib.lookupFunction<
        _c_wgpuBufferGetMappedRange,
        _dart_wgpuBufferGetMappedRange>('wgpuBufferGetMappedRange');
    return _wgpuBufferGetMappedRange(
      buffer,
      offset,
      size,
    );
  }

  _dart_wgpuBufferGetMappedRange _wgpuBufferGetMappedRange;

  void wgpuBufferMapAsync(
    ffi.Pointer<WGPUBufferImpl> buffer,
    int mode,
    int offset,
    int size,
    ffi.Pointer<ffi.NativeFunction<WGPUBufferMapCallback>> callback,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    _wgpuBufferMapAsync ??=
        _dylib.lookupFunction<_c_wgpuBufferMapAsync, _dart_wgpuBufferMapAsync>(
            'wgpuBufferMapAsync');
    return _wgpuBufferMapAsync(
      buffer,
      mode,
      offset,
      size,
      callback,
      userdata,
    );
  }

  _dart_wgpuBufferMapAsync _wgpuBufferMapAsync;

  void wgpuBufferUnmap(
    ffi.Pointer<WGPUBufferImpl> buffer,
  ) {
    _wgpuBufferUnmap ??=
        _dylib.lookupFunction<_c_wgpuBufferUnmap, _dart_wgpuBufferUnmap>(
            'wgpuBufferUnmap');
    return _wgpuBufferUnmap(
      buffer,
    );
  }

  _dart_wgpuBufferUnmap _wgpuBufferUnmap;

  void wgpuBufferReference(
    ffi.Pointer<WGPUBufferImpl> buffer,
  ) {
    _wgpuBufferReference ??= _dylib.lookupFunction<_c_wgpuBufferReference,
        _dart_wgpuBufferReference>('wgpuBufferReference');
    return _wgpuBufferReference(
      buffer,
    );
  }

  _dart_wgpuBufferReference _wgpuBufferReference;

  void wgpuBufferRelease(
    ffi.Pointer<WGPUBufferImpl> buffer,
  ) {
    _wgpuBufferRelease ??=
        _dylib.lookupFunction<_c_wgpuBufferRelease, _dart_wgpuBufferRelease>(
            'wgpuBufferRelease');
    return _wgpuBufferRelease(
      buffer,
    );
  }

  _dart_wgpuBufferRelease _wgpuBufferRelease;

  void wgpuCommandBufferReference(
    ffi.Pointer<WGPUCommandBufferImpl> commandBuffer,
  ) {
    _wgpuCommandBufferReference ??= _dylib.lookupFunction<
        _c_wgpuCommandBufferReference,
        _dart_wgpuCommandBufferReference>('wgpuCommandBufferReference');
    return _wgpuCommandBufferReference(
      commandBuffer,
    );
  }

  _dart_wgpuCommandBufferReference _wgpuCommandBufferReference;

  void wgpuCommandBufferRelease(
    ffi.Pointer<WGPUCommandBufferImpl> commandBuffer,
  ) {
    _wgpuCommandBufferRelease ??= _dylib.lookupFunction<
        _c_wgpuCommandBufferRelease,
        _dart_wgpuCommandBufferRelease>('wgpuCommandBufferRelease');
    return _wgpuCommandBufferRelease(
      commandBuffer,
    );
  }

  _dart_wgpuCommandBufferRelease _wgpuCommandBufferRelease;

  ffi.Pointer<WGPUComputePassEncoderImpl> wgpuCommandEncoderBeginComputePass(
    ffi.Pointer<WGPUCommandEncoderImpl> commandEncoder,
    ffi.Pointer<WGPUComputePassDescriptor> descriptor,
  ) {
    _wgpuCommandEncoderBeginComputePass ??= _dylib.lookupFunction<
            _c_wgpuCommandEncoderBeginComputePass,
            _dart_wgpuCommandEncoderBeginComputePass>(
        'wgpuCommandEncoderBeginComputePass');
    return _wgpuCommandEncoderBeginComputePass(
      commandEncoder,
      descriptor,
    );
  }

  _dart_wgpuCommandEncoderBeginComputePass _wgpuCommandEncoderBeginComputePass;

  ffi.Pointer<WGPURenderPassEncoderImpl> wgpuCommandEncoderBeginRenderPass(
    ffi.Pointer<WGPUCommandEncoderImpl> commandEncoder,
    ffi.Pointer<WGPURenderPassDescriptor> descriptor,
  ) {
    _wgpuCommandEncoderBeginRenderPass ??= _dylib.lookupFunction<
            _c_wgpuCommandEncoderBeginRenderPass,
            _dart_wgpuCommandEncoderBeginRenderPass>(
        'wgpuCommandEncoderBeginRenderPass');
    return _wgpuCommandEncoderBeginRenderPass(
      commandEncoder,
      descriptor,
    );
  }

  _dart_wgpuCommandEncoderBeginRenderPass _wgpuCommandEncoderBeginRenderPass;

  void wgpuCommandEncoderCopyBufferToBuffer(
    ffi.Pointer<WGPUCommandEncoderImpl> commandEncoder,
    ffi.Pointer<WGPUBufferImpl> source,
    int sourceOffset,
    ffi.Pointer<WGPUBufferImpl> destination,
    int destinationOffset,
    int size,
  ) {
    _wgpuCommandEncoderCopyBufferToBuffer ??= _dylib.lookupFunction<
            _c_wgpuCommandEncoderCopyBufferToBuffer,
            _dart_wgpuCommandEncoderCopyBufferToBuffer>(
        'wgpuCommandEncoderCopyBufferToBuffer');
    return _wgpuCommandEncoderCopyBufferToBuffer(
      commandEncoder,
      source,
      sourceOffset,
      destination,
      destinationOffset,
      size,
    );
  }

  _dart_wgpuCommandEncoderCopyBufferToBuffer
      _wgpuCommandEncoderCopyBufferToBuffer;

  void wgpuCommandEncoderCopyBufferToTexture(
    ffi.Pointer<WGPUCommandEncoderImpl> commandEncoder,
    ffi.Pointer<WGPUBufferCopyView> source,
    ffi.Pointer<WGPUTextureCopyView> destination,
    ffi.Pointer<WGPUExtent3D> copySize,
  ) {
    _wgpuCommandEncoderCopyBufferToTexture ??= _dylib.lookupFunction<
            _c_wgpuCommandEncoderCopyBufferToTexture,
            _dart_wgpuCommandEncoderCopyBufferToTexture>(
        'wgpuCommandEncoderCopyBufferToTexture');
    return _wgpuCommandEncoderCopyBufferToTexture(
      commandEncoder,
      source,
      destination,
      copySize,
    );
  }

  _dart_wgpuCommandEncoderCopyBufferToTexture
      _wgpuCommandEncoderCopyBufferToTexture;

  void wgpuCommandEncoderCopyTextureToBuffer(
    ffi.Pointer<WGPUCommandEncoderImpl> commandEncoder,
    ffi.Pointer<WGPUTextureCopyView> source,
    ffi.Pointer<WGPUBufferCopyView> destination,
    ffi.Pointer<WGPUExtent3D> copySize,
  ) {
    _wgpuCommandEncoderCopyTextureToBuffer ??= _dylib.lookupFunction<
            _c_wgpuCommandEncoderCopyTextureToBuffer,
            _dart_wgpuCommandEncoderCopyTextureToBuffer>(
        'wgpuCommandEncoderCopyTextureToBuffer');
    return _wgpuCommandEncoderCopyTextureToBuffer(
      commandEncoder,
      source,
      destination,
      copySize,
    );
  }

  _dart_wgpuCommandEncoderCopyTextureToBuffer
      _wgpuCommandEncoderCopyTextureToBuffer;

  void wgpuCommandEncoderCopyTextureToTexture(
    ffi.Pointer<WGPUCommandEncoderImpl> commandEncoder,
    ffi.Pointer<WGPUTextureCopyView> source,
    ffi.Pointer<WGPUTextureCopyView> destination,
    ffi.Pointer<WGPUExtent3D> copySize,
  ) {
    _wgpuCommandEncoderCopyTextureToTexture ??= _dylib.lookupFunction<
            _c_wgpuCommandEncoderCopyTextureToTexture,
            _dart_wgpuCommandEncoderCopyTextureToTexture>(
        'wgpuCommandEncoderCopyTextureToTexture');
    return _wgpuCommandEncoderCopyTextureToTexture(
      commandEncoder,
      source,
      destination,
      copySize,
    );
  }

  _dart_wgpuCommandEncoderCopyTextureToTexture
      _wgpuCommandEncoderCopyTextureToTexture;

  ffi.Pointer<WGPUCommandBufferImpl> wgpuCommandEncoderFinish(
    ffi.Pointer<WGPUCommandEncoderImpl> commandEncoder,
    ffi.Pointer<WGPUCommandBufferDescriptor> descriptor,
  ) {
    _wgpuCommandEncoderFinish ??= _dylib.lookupFunction<
        _c_wgpuCommandEncoderFinish,
        _dart_wgpuCommandEncoderFinish>('wgpuCommandEncoderFinish');
    return _wgpuCommandEncoderFinish(
      commandEncoder,
      descriptor,
    );
  }

  _dart_wgpuCommandEncoderFinish _wgpuCommandEncoderFinish;

  void wgpuCommandEncoderInjectValidationError(
    ffi.Pointer<WGPUCommandEncoderImpl> commandEncoder,
    ffi.Pointer<ffi.Int8> message,
  ) {
    _wgpuCommandEncoderInjectValidationError ??= _dylib.lookupFunction<
            _c_wgpuCommandEncoderInjectValidationError,
            _dart_wgpuCommandEncoderInjectValidationError>(
        'wgpuCommandEncoderInjectValidationError');
    return _wgpuCommandEncoderInjectValidationError(
      commandEncoder,
      message,
    );
  }

  _dart_wgpuCommandEncoderInjectValidationError
      _wgpuCommandEncoderInjectValidationError;

  void wgpuCommandEncoderInsertDebugMarker(
    ffi.Pointer<WGPUCommandEncoderImpl> commandEncoder,
    ffi.Pointer<ffi.Int8> markerLabel,
  ) {
    _wgpuCommandEncoderInsertDebugMarker ??= _dylib.lookupFunction<
            _c_wgpuCommandEncoderInsertDebugMarker,
            _dart_wgpuCommandEncoderInsertDebugMarker>(
        'wgpuCommandEncoderInsertDebugMarker');
    return _wgpuCommandEncoderInsertDebugMarker(
      commandEncoder,
      markerLabel,
    );
  }

  _dart_wgpuCommandEncoderInsertDebugMarker
      _wgpuCommandEncoderInsertDebugMarker;

  void wgpuCommandEncoderPopDebugGroup(
    ffi.Pointer<WGPUCommandEncoderImpl> commandEncoder,
  ) {
    _wgpuCommandEncoderPopDebugGroup ??= _dylib.lookupFunction<
            _c_wgpuCommandEncoderPopDebugGroup,
            _dart_wgpuCommandEncoderPopDebugGroup>(
        'wgpuCommandEncoderPopDebugGroup');
    return _wgpuCommandEncoderPopDebugGroup(
      commandEncoder,
    );
  }

  _dart_wgpuCommandEncoderPopDebugGroup _wgpuCommandEncoderPopDebugGroup;

  void wgpuCommandEncoderPushDebugGroup(
    ffi.Pointer<WGPUCommandEncoderImpl> commandEncoder,
    ffi.Pointer<ffi.Int8> groupLabel,
  ) {
    _wgpuCommandEncoderPushDebugGroup ??= _dylib.lookupFunction<
            _c_wgpuCommandEncoderPushDebugGroup,
            _dart_wgpuCommandEncoderPushDebugGroup>(
        'wgpuCommandEncoderPushDebugGroup');
    return _wgpuCommandEncoderPushDebugGroup(
      commandEncoder,
      groupLabel,
    );
  }

  _dart_wgpuCommandEncoderPushDebugGroup _wgpuCommandEncoderPushDebugGroup;

  void wgpuCommandEncoderResolveQuerySet(
    ffi.Pointer<WGPUCommandEncoderImpl> commandEncoder,
    ffi.Pointer<WGPUQuerySetImpl> querySet,
    int firstQuery,
    int queryCount,
    ffi.Pointer<WGPUBufferImpl> destination,
    int destinationOffset,
  ) {
    _wgpuCommandEncoderResolveQuerySet ??= _dylib.lookupFunction<
            _c_wgpuCommandEncoderResolveQuerySet,
            _dart_wgpuCommandEncoderResolveQuerySet>(
        'wgpuCommandEncoderResolveQuerySet');
    return _wgpuCommandEncoderResolveQuerySet(
      commandEncoder,
      querySet,
      firstQuery,
      queryCount,
      destination,
      destinationOffset,
    );
  }

  _dart_wgpuCommandEncoderResolveQuerySet _wgpuCommandEncoderResolveQuerySet;

  void wgpuCommandEncoderWriteTimestamp(
    ffi.Pointer<WGPUCommandEncoderImpl> commandEncoder,
    ffi.Pointer<WGPUQuerySetImpl> querySet,
    int queryIndex,
  ) {
    _wgpuCommandEncoderWriteTimestamp ??= _dylib.lookupFunction<
            _c_wgpuCommandEncoderWriteTimestamp,
            _dart_wgpuCommandEncoderWriteTimestamp>(
        'wgpuCommandEncoderWriteTimestamp');
    return _wgpuCommandEncoderWriteTimestamp(
      commandEncoder,
      querySet,
      queryIndex,
    );
  }

  _dart_wgpuCommandEncoderWriteTimestamp _wgpuCommandEncoderWriteTimestamp;

  void wgpuCommandEncoderReference(
    ffi.Pointer<WGPUCommandEncoderImpl> commandEncoder,
  ) {
    _wgpuCommandEncoderReference ??= _dylib.lookupFunction<
        _c_wgpuCommandEncoderReference,
        _dart_wgpuCommandEncoderReference>('wgpuCommandEncoderReference');
    return _wgpuCommandEncoderReference(
      commandEncoder,
    );
  }

  _dart_wgpuCommandEncoderReference _wgpuCommandEncoderReference;

  void wgpuCommandEncoderRelease(
    ffi.Pointer<WGPUCommandEncoderImpl> commandEncoder,
  ) {
    _wgpuCommandEncoderRelease ??= _dylib.lookupFunction<
        _c_wgpuCommandEncoderRelease,
        _dart_wgpuCommandEncoderRelease>('wgpuCommandEncoderRelease');
    return _wgpuCommandEncoderRelease(
      commandEncoder,
    );
  }

  _dart_wgpuCommandEncoderRelease _wgpuCommandEncoderRelease;

  void wgpuComputePassEncoderDispatch(
    ffi.Pointer<WGPUComputePassEncoderImpl> computePassEncoder,
    int x,
    int y,
    int z,
  ) {
    _wgpuComputePassEncoderDispatch ??= _dylib.lookupFunction<
        _c_wgpuComputePassEncoderDispatch,
        _dart_wgpuComputePassEncoderDispatch>('wgpuComputePassEncoderDispatch');
    return _wgpuComputePassEncoderDispatch(
      computePassEncoder,
      x,
      y,
      z,
    );
  }

  _dart_wgpuComputePassEncoderDispatch _wgpuComputePassEncoderDispatch;

  void wgpuComputePassEncoderDispatchIndirect(
    ffi.Pointer<WGPUComputePassEncoderImpl> computePassEncoder,
    ffi.Pointer<WGPUBufferImpl> indirectBuffer,
    int indirectOffset,
  ) {
    _wgpuComputePassEncoderDispatchIndirect ??= _dylib.lookupFunction<
            _c_wgpuComputePassEncoderDispatchIndirect,
            _dart_wgpuComputePassEncoderDispatchIndirect>(
        'wgpuComputePassEncoderDispatchIndirect');
    return _wgpuComputePassEncoderDispatchIndirect(
      computePassEncoder,
      indirectBuffer,
      indirectOffset,
    );
  }

  _dart_wgpuComputePassEncoderDispatchIndirect
      _wgpuComputePassEncoderDispatchIndirect;

  void wgpuComputePassEncoderEndPass(
    ffi.Pointer<WGPUComputePassEncoderImpl> computePassEncoder,
  ) {
    _wgpuComputePassEncoderEndPass ??= _dylib.lookupFunction<
        _c_wgpuComputePassEncoderEndPass,
        _dart_wgpuComputePassEncoderEndPass>('wgpuComputePassEncoderEndPass');
    return _wgpuComputePassEncoderEndPass(
      computePassEncoder,
    );
  }

  _dart_wgpuComputePassEncoderEndPass _wgpuComputePassEncoderEndPass;

  void wgpuComputePassEncoderInsertDebugMarker(
    ffi.Pointer<WGPUComputePassEncoderImpl> computePassEncoder,
    ffi.Pointer<ffi.Int8> markerLabel,
  ) {
    _wgpuComputePassEncoderInsertDebugMarker ??= _dylib.lookupFunction<
            _c_wgpuComputePassEncoderInsertDebugMarker,
            _dart_wgpuComputePassEncoderInsertDebugMarker>(
        'wgpuComputePassEncoderInsertDebugMarker');
    return _wgpuComputePassEncoderInsertDebugMarker(
      computePassEncoder,
      markerLabel,
    );
  }

  _dart_wgpuComputePassEncoderInsertDebugMarker
      _wgpuComputePassEncoderInsertDebugMarker;

  void wgpuComputePassEncoderPopDebugGroup(
    ffi.Pointer<WGPUComputePassEncoderImpl> computePassEncoder,
  ) {
    _wgpuComputePassEncoderPopDebugGroup ??= _dylib.lookupFunction<
            _c_wgpuComputePassEncoderPopDebugGroup,
            _dart_wgpuComputePassEncoderPopDebugGroup>(
        'wgpuComputePassEncoderPopDebugGroup');
    return _wgpuComputePassEncoderPopDebugGroup(
      computePassEncoder,
    );
  }

  _dart_wgpuComputePassEncoderPopDebugGroup
      _wgpuComputePassEncoderPopDebugGroup;

  void wgpuComputePassEncoderPushDebugGroup(
    ffi.Pointer<WGPUComputePassEncoderImpl> computePassEncoder,
    ffi.Pointer<ffi.Int8> groupLabel,
  ) {
    _wgpuComputePassEncoderPushDebugGroup ??= _dylib.lookupFunction<
            _c_wgpuComputePassEncoderPushDebugGroup,
            _dart_wgpuComputePassEncoderPushDebugGroup>(
        'wgpuComputePassEncoderPushDebugGroup');
    return _wgpuComputePassEncoderPushDebugGroup(
      computePassEncoder,
      groupLabel,
    );
  }

  _dart_wgpuComputePassEncoderPushDebugGroup
      _wgpuComputePassEncoderPushDebugGroup;

  void wgpuComputePassEncoderSetBindGroup(
    ffi.Pointer<WGPUComputePassEncoderImpl> computePassEncoder,
    int groupIndex,
    ffi.Pointer<WGPUBindGroupImpl> group,
    int dynamicOffsetCount,
    ffi.Pointer<ffi.Uint32> dynamicOffsets,
  ) {
    _wgpuComputePassEncoderSetBindGroup ??= _dylib.lookupFunction<
            _c_wgpuComputePassEncoderSetBindGroup,
            _dart_wgpuComputePassEncoderSetBindGroup>(
        'wgpuComputePassEncoderSetBindGroup');
    return _wgpuComputePassEncoderSetBindGroup(
      computePassEncoder,
      groupIndex,
      group,
      dynamicOffsetCount,
      dynamicOffsets,
    );
  }

  _dart_wgpuComputePassEncoderSetBindGroup _wgpuComputePassEncoderSetBindGroup;

  void wgpuComputePassEncoderSetPipeline(
    ffi.Pointer<WGPUComputePassEncoderImpl> computePassEncoder,
    ffi.Pointer<WGPUComputePipelineImpl> pipeline,
  ) {
    _wgpuComputePassEncoderSetPipeline ??= _dylib.lookupFunction<
            _c_wgpuComputePassEncoderSetPipeline,
            _dart_wgpuComputePassEncoderSetPipeline>(
        'wgpuComputePassEncoderSetPipeline');
    return _wgpuComputePassEncoderSetPipeline(
      computePassEncoder,
      pipeline,
    );
  }

  _dart_wgpuComputePassEncoderSetPipeline _wgpuComputePassEncoderSetPipeline;

  void wgpuComputePassEncoderWriteTimestamp(
    ffi.Pointer<WGPUComputePassEncoderImpl> computePassEncoder,
    ffi.Pointer<WGPUQuerySetImpl> querySet,
    int queryIndex,
  ) {
    _wgpuComputePassEncoderWriteTimestamp ??= _dylib.lookupFunction<
            _c_wgpuComputePassEncoderWriteTimestamp,
            _dart_wgpuComputePassEncoderWriteTimestamp>(
        'wgpuComputePassEncoderWriteTimestamp');
    return _wgpuComputePassEncoderWriteTimestamp(
      computePassEncoder,
      querySet,
      queryIndex,
    );
  }

  _dart_wgpuComputePassEncoderWriteTimestamp
      _wgpuComputePassEncoderWriteTimestamp;

  void wgpuComputePassEncoderReference(
    ffi.Pointer<WGPUComputePassEncoderImpl> computePassEncoder,
  ) {
    _wgpuComputePassEncoderReference ??= _dylib.lookupFunction<
            _c_wgpuComputePassEncoderReference,
            _dart_wgpuComputePassEncoderReference>(
        'wgpuComputePassEncoderReference');
    return _wgpuComputePassEncoderReference(
      computePassEncoder,
    );
  }

  _dart_wgpuComputePassEncoderReference _wgpuComputePassEncoderReference;

  void wgpuComputePassEncoderRelease(
    ffi.Pointer<WGPUComputePassEncoderImpl> computePassEncoder,
  ) {
    _wgpuComputePassEncoderRelease ??= _dylib.lookupFunction<
        _c_wgpuComputePassEncoderRelease,
        _dart_wgpuComputePassEncoderRelease>('wgpuComputePassEncoderRelease');
    return _wgpuComputePassEncoderRelease(
      computePassEncoder,
    );
  }

  _dart_wgpuComputePassEncoderRelease _wgpuComputePassEncoderRelease;

  ffi.Pointer<WGPUBindGroupLayoutImpl> wgpuComputePipelineGetBindGroupLayout(
    ffi.Pointer<WGPUComputePipelineImpl> computePipeline,
    int groupIndex,
  ) {
    _wgpuComputePipelineGetBindGroupLayout ??= _dylib.lookupFunction<
            _c_wgpuComputePipelineGetBindGroupLayout,
            _dart_wgpuComputePipelineGetBindGroupLayout>(
        'wgpuComputePipelineGetBindGroupLayout');
    return _wgpuComputePipelineGetBindGroupLayout(
      computePipeline,
      groupIndex,
    );
  }

  _dart_wgpuComputePipelineGetBindGroupLayout
      _wgpuComputePipelineGetBindGroupLayout;

  void wgpuComputePipelineReference(
    ffi.Pointer<WGPUComputePipelineImpl> computePipeline,
  ) {
    _wgpuComputePipelineReference ??= _dylib.lookupFunction<
        _c_wgpuComputePipelineReference,
        _dart_wgpuComputePipelineReference>('wgpuComputePipelineReference');
    return _wgpuComputePipelineReference(
      computePipeline,
    );
  }

  _dart_wgpuComputePipelineReference _wgpuComputePipelineReference;

  void wgpuComputePipelineRelease(
    ffi.Pointer<WGPUComputePipelineImpl> computePipeline,
  ) {
    _wgpuComputePipelineRelease ??= _dylib.lookupFunction<
        _c_wgpuComputePipelineRelease,
        _dart_wgpuComputePipelineRelease>('wgpuComputePipelineRelease');
    return _wgpuComputePipelineRelease(
      computePipeline,
    );
  }

  _dart_wgpuComputePipelineRelease _wgpuComputePipelineRelease;

  ffi.Pointer<WGPUBindGroupImpl> wgpuDeviceCreateBindGroup(
    ffi.Pointer<WGPUDeviceImpl> device,
    ffi.Pointer<WGPUBindGroupDescriptor> descriptor,
  ) {
    _wgpuDeviceCreateBindGroup ??= _dylib.lookupFunction<
        _c_wgpuDeviceCreateBindGroup,
        _dart_wgpuDeviceCreateBindGroup>('wgpuDeviceCreateBindGroup');
    return _wgpuDeviceCreateBindGroup(
      device,
      descriptor,
    );
  }

  _dart_wgpuDeviceCreateBindGroup _wgpuDeviceCreateBindGroup;

  ffi.Pointer<WGPUBindGroupLayoutImpl> wgpuDeviceCreateBindGroupLayout(
    ffi.Pointer<WGPUDeviceImpl> device,
    ffi.Pointer<WGPUBindGroupLayoutDescriptor> descriptor,
  ) {
    _wgpuDeviceCreateBindGroupLayout ??= _dylib.lookupFunction<
            _c_wgpuDeviceCreateBindGroupLayout,
            _dart_wgpuDeviceCreateBindGroupLayout>(
        'wgpuDeviceCreateBindGroupLayout');
    return _wgpuDeviceCreateBindGroupLayout(
      device,
      descriptor,
    );
  }

  _dart_wgpuDeviceCreateBindGroupLayout _wgpuDeviceCreateBindGroupLayout;

  ffi.Pointer<WGPUBufferImpl> wgpuDeviceCreateBuffer(
    ffi.Pointer<WGPUDeviceImpl> device,
    ffi.Pointer<WGPUBufferDescriptor> descriptor,
  ) {
    _wgpuDeviceCreateBuffer ??= _dylib.lookupFunction<_c_wgpuDeviceCreateBuffer,
        _dart_wgpuDeviceCreateBuffer>('wgpuDeviceCreateBuffer');
    return _wgpuDeviceCreateBuffer(
      device,
      descriptor,
    );
  }

  _dart_wgpuDeviceCreateBuffer _wgpuDeviceCreateBuffer;

  ffi.Pointer<WGPUCommandEncoderImpl> wgpuDeviceCreateCommandEncoder(
    ffi.Pointer<WGPUDeviceImpl> device,
    ffi.Pointer<WGPUCommandEncoderDescriptor> descriptor,
  ) {
    _wgpuDeviceCreateCommandEncoder ??= _dylib.lookupFunction<
        _c_wgpuDeviceCreateCommandEncoder,
        _dart_wgpuDeviceCreateCommandEncoder>('wgpuDeviceCreateCommandEncoder');
    return _wgpuDeviceCreateCommandEncoder(
      device,
      descriptor,
    );
  }

  _dart_wgpuDeviceCreateCommandEncoder _wgpuDeviceCreateCommandEncoder;

  ffi.Pointer<WGPUComputePipelineImpl> wgpuDeviceCreateComputePipeline(
    ffi.Pointer<WGPUDeviceImpl> device,
    ffi.Pointer<WGPUComputePipelineDescriptor> descriptor,
  ) {
    _wgpuDeviceCreateComputePipeline ??= _dylib.lookupFunction<
            _c_wgpuDeviceCreateComputePipeline,
            _dart_wgpuDeviceCreateComputePipeline>(
        'wgpuDeviceCreateComputePipeline');
    return _wgpuDeviceCreateComputePipeline(
      device,
      descriptor,
    );
  }

  _dart_wgpuDeviceCreateComputePipeline _wgpuDeviceCreateComputePipeline;

  ffi.Pointer<WGPUBufferImpl> wgpuDeviceCreateErrorBuffer(
    ffi.Pointer<WGPUDeviceImpl> device,
  ) {
    _wgpuDeviceCreateErrorBuffer ??= _dylib.lookupFunction<
        _c_wgpuDeviceCreateErrorBuffer,
        _dart_wgpuDeviceCreateErrorBuffer>('wgpuDeviceCreateErrorBuffer');
    return _wgpuDeviceCreateErrorBuffer(
      device,
    );
  }

  _dart_wgpuDeviceCreateErrorBuffer _wgpuDeviceCreateErrorBuffer;

  ffi.Pointer<WGPUPipelineLayoutImpl> wgpuDeviceCreatePipelineLayout(
    ffi.Pointer<WGPUDeviceImpl> device,
    ffi.Pointer<WGPUPipelineLayoutDescriptor> descriptor,
  ) {
    _wgpuDeviceCreatePipelineLayout ??= _dylib.lookupFunction<
        _c_wgpuDeviceCreatePipelineLayout,
        _dart_wgpuDeviceCreatePipelineLayout>('wgpuDeviceCreatePipelineLayout');
    return _wgpuDeviceCreatePipelineLayout(
      device,
      descriptor,
    );
  }

  _dart_wgpuDeviceCreatePipelineLayout _wgpuDeviceCreatePipelineLayout;

  ffi.Pointer<WGPUQuerySetImpl> wgpuDeviceCreateQuerySet(
    ffi.Pointer<WGPUDeviceImpl> device,
    ffi.Pointer<WGPUQuerySetDescriptor> descriptor,
  ) {
    _wgpuDeviceCreateQuerySet ??= _dylib.lookupFunction<
        _c_wgpuDeviceCreateQuerySet,
        _dart_wgpuDeviceCreateQuerySet>('wgpuDeviceCreateQuerySet');
    return _wgpuDeviceCreateQuerySet(
      device,
      descriptor,
    );
  }

  _dart_wgpuDeviceCreateQuerySet _wgpuDeviceCreateQuerySet;

  void wgpuDeviceCreateReadyComputePipeline(
    ffi.Pointer<WGPUDeviceImpl> device,
    ffi.Pointer<WGPUComputePipelineDescriptor> descriptor,
    ffi.Pointer<ffi.NativeFunction<WGPUCreateReadyComputePipelineCallback>>
        callback,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    _wgpuDeviceCreateReadyComputePipeline ??= _dylib.lookupFunction<
            _c_wgpuDeviceCreateReadyComputePipeline,
            _dart_wgpuDeviceCreateReadyComputePipeline>(
        'wgpuDeviceCreateReadyComputePipeline');
    return _wgpuDeviceCreateReadyComputePipeline(
      device,
      descriptor,
      callback,
      userdata,
    );
  }

  _dart_wgpuDeviceCreateReadyComputePipeline
      _wgpuDeviceCreateReadyComputePipeline;

  void wgpuDeviceCreateReadyRenderPipeline(
    ffi.Pointer<WGPUDeviceImpl> device,
    ffi.Pointer<WGPURenderPipelineDescriptor> descriptor,
    ffi.Pointer<ffi.NativeFunction<WGPUCreateReadyRenderPipelineCallback>>
        callback,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    _wgpuDeviceCreateReadyRenderPipeline ??= _dylib.lookupFunction<
            _c_wgpuDeviceCreateReadyRenderPipeline,
            _dart_wgpuDeviceCreateReadyRenderPipeline>(
        'wgpuDeviceCreateReadyRenderPipeline');
    return _wgpuDeviceCreateReadyRenderPipeline(
      device,
      descriptor,
      callback,
      userdata,
    );
  }

  _dart_wgpuDeviceCreateReadyRenderPipeline
      _wgpuDeviceCreateReadyRenderPipeline;

  ffi.Pointer<WGPURenderBundleEncoderImpl> wgpuDeviceCreateRenderBundleEncoder(
    ffi.Pointer<WGPUDeviceImpl> device,
    ffi.Pointer<WGPURenderBundleEncoderDescriptor> descriptor,
  ) {
    _wgpuDeviceCreateRenderBundleEncoder ??= _dylib.lookupFunction<
            _c_wgpuDeviceCreateRenderBundleEncoder,
            _dart_wgpuDeviceCreateRenderBundleEncoder>(
        'wgpuDeviceCreateRenderBundleEncoder');
    return _wgpuDeviceCreateRenderBundleEncoder(
      device,
      descriptor,
    );
  }

  _dart_wgpuDeviceCreateRenderBundleEncoder
      _wgpuDeviceCreateRenderBundleEncoder;

  ffi.Pointer<WGPURenderPipelineImpl> wgpuDeviceCreateRenderPipeline(
    ffi.Pointer<WGPUDeviceImpl> device,
    ffi.Pointer<WGPURenderPipelineDescriptor> descriptor,
  ) {
    _wgpuDeviceCreateRenderPipeline ??= _dylib.lookupFunction<
        _c_wgpuDeviceCreateRenderPipeline,
        _dart_wgpuDeviceCreateRenderPipeline>('wgpuDeviceCreateRenderPipeline');
    return _wgpuDeviceCreateRenderPipeline(
      device,
      descriptor,
    );
  }

  _dart_wgpuDeviceCreateRenderPipeline _wgpuDeviceCreateRenderPipeline;

  ffi.Pointer<WGPUSamplerImpl> wgpuDeviceCreateSampler(
    ffi.Pointer<WGPUDeviceImpl> device,
    ffi.Pointer<WGPUSamplerDescriptor> descriptor,
  ) {
    _wgpuDeviceCreateSampler ??= _dylib.lookupFunction<
        _c_wgpuDeviceCreateSampler,
        _dart_wgpuDeviceCreateSampler>('wgpuDeviceCreateSampler');
    return _wgpuDeviceCreateSampler(
      device,
      descriptor,
    );
  }

  _dart_wgpuDeviceCreateSampler _wgpuDeviceCreateSampler;

  ffi.Pointer<WGPUShaderModuleImpl> wgpuDeviceCreateShaderModule(
    ffi.Pointer<WGPUDeviceImpl> device,
    ffi.Pointer<WGPUShaderModuleDescriptor> descriptor,
  ) {
    _wgpuDeviceCreateShaderModule ??= _dylib.lookupFunction<
        _c_wgpuDeviceCreateShaderModule,
        _dart_wgpuDeviceCreateShaderModule>('wgpuDeviceCreateShaderModule');
    return _wgpuDeviceCreateShaderModule(
      device,
      descriptor,
    );
  }

  _dart_wgpuDeviceCreateShaderModule _wgpuDeviceCreateShaderModule;

  ffi.Pointer<WGPUSwapChainImpl> wgpuDeviceCreateSwapChain(
    ffi.Pointer<WGPUDeviceImpl> device,
    ffi.Pointer<WGPUSurfaceImpl> surface,
    ffi.Pointer<WGPUSwapChainDescriptor> descriptor,
  ) {
    _wgpuDeviceCreateSwapChain ??= _dylib.lookupFunction<
        _c_wgpuDeviceCreateSwapChain,
        _dart_wgpuDeviceCreateSwapChain>('wgpuDeviceCreateSwapChain');
    return _wgpuDeviceCreateSwapChain(
      device,
      surface,
      descriptor,
    );
  }

  _dart_wgpuDeviceCreateSwapChain _wgpuDeviceCreateSwapChain;

  ffi.Pointer<WGPUTextureImpl> wgpuDeviceCreateTexture(
    ffi.Pointer<WGPUDeviceImpl> device,
    ffi.Pointer<WGPUTextureDescriptor> descriptor,
  ) {
    _wgpuDeviceCreateTexture ??= _dylib.lookupFunction<
        _c_wgpuDeviceCreateTexture,
        _dart_wgpuDeviceCreateTexture>('wgpuDeviceCreateTexture');
    return _wgpuDeviceCreateTexture(
      device,
      descriptor,
    );
  }

  _dart_wgpuDeviceCreateTexture _wgpuDeviceCreateTexture;

  ffi.Pointer<WGPUQueueImpl> wgpuDeviceGetDefaultQueue(
    ffi.Pointer<WGPUDeviceImpl> device,
  ) {
    _wgpuDeviceGetDefaultQueue ??= _dylib.lookupFunction<
        _c_wgpuDeviceGetDefaultQueue,
        _dart_wgpuDeviceGetDefaultQueue>('wgpuDeviceGetDefaultQueue');
    return _wgpuDeviceGetDefaultQueue(
      device,
    );
  }

  _dart_wgpuDeviceGetDefaultQueue _wgpuDeviceGetDefaultQueue;

  void wgpuDeviceInjectError(
    ffi.Pointer<WGPUDeviceImpl> device,
    int type,
    ffi.Pointer<ffi.Int8> message,
  ) {
    _wgpuDeviceInjectError ??= _dylib.lookupFunction<_c_wgpuDeviceInjectError,
        _dart_wgpuDeviceInjectError>('wgpuDeviceInjectError');
    return _wgpuDeviceInjectError(
      device,
      type,
      message,
    );
  }

  _dart_wgpuDeviceInjectError _wgpuDeviceInjectError;

  void wgpuDeviceLoseForTesting(
    ffi.Pointer<WGPUDeviceImpl> device,
  ) {
    _wgpuDeviceLoseForTesting ??= _dylib.lookupFunction<
        _c_wgpuDeviceLoseForTesting,
        _dart_wgpuDeviceLoseForTesting>('wgpuDeviceLoseForTesting');
    return _wgpuDeviceLoseForTesting(
      device,
    );
  }

  _dart_wgpuDeviceLoseForTesting _wgpuDeviceLoseForTesting;

  bool wgpuDevicePopErrorScope(
    ffi.Pointer<WGPUDeviceImpl> device,
    ffi.Pointer<ffi.NativeFunction<WGPUErrorCallback>> callback,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    _wgpuDevicePopErrorScope ??= _dylib.lookupFunction<
        _c_wgpuDevicePopErrorScope,
        _dart_wgpuDevicePopErrorScope>('wgpuDevicePopErrorScope');
    return _wgpuDevicePopErrorScope(
          device,
          callback,
          userdata,
        ) !=
        0;
  }

  _dart_wgpuDevicePopErrorScope _wgpuDevicePopErrorScope;

  void wgpuDevicePushErrorScope(
    ffi.Pointer<WGPUDeviceImpl> device,
    int filter,
  ) {
    _wgpuDevicePushErrorScope ??= _dylib.lookupFunction<
        _c_wgpuDevicePushErrorScope,
        _dart_wgpuDevicePushErrorScope>('wgpuDevicePushErrorScope');
    return _wgpuDevicePushErrorScope(
      device,
      filter,
    );
  }

  _dart_wgpuDevicePushErrorScope _wgpuDevicePushErrorScope;

  void wgpuDeviceSetDeviceLostCallback(
    ffi.Pointer<WGPUDeviceImpl> device,
    ffi.Pointer<ffi.NativeFunction<WGPUDeviceLostCallback>> callback,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    _wgpuDeviceSetDeviceLostCallback ??= _dylib.lookupFunction<
            _c_wgpuDeviceSetDeviceLostCallback,
            _dart_wgpuDeviceSetDeviceLostCallback>(
        'wgpuDeviceSetDeviceLostCallback');
    return _wgpuDeviceSetDeviceLostCallback(
      device,
      callback,
      userdata,
    );
  }

  _dart_wgpuDeviceSetDeviceLostCallback _wgpuDeviceSetDeviceLostCallback;

  void wgpuDeviceSetUncapturedErrorCallback(
    ffi.Pointer<WGPUDeviceImpl> device,
    ffi.Pointer<ffi.NativeFunction<WGPUErrorCallback>> callback,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    _wgpuDeviceSetUncapturedErrorCallback ??= _dylib.lookupFunction<
            _c_wgpuDeviceSetUncapturedErrorCallback,
            _dart_wgpuDeviceSetUncapturedErrorCallback>(
        'wgpuDeviceSetUncapturedErrorCallback');
    return _wgpuDeviceSetUncapturedErrorCallback(
      device,
      callback,
      userdata,
    );
  }

  _dart_wgpuDeviceSetUncapturedErrorCallback
      _wgpuDeviceSetUncapturedErrorCallback;

  void wgpuDeviceTick(
    ffi.Pointer<WGPUDeviceImpl> device,
  ) {
    _wgpuDeviceTick ??=
        _dylib.lookupFunction<_c_wgpuDeviceTick, _dart_wgpuDeviceTick>(
            'wgpuDeviceTick');
    return _wgpuDeviceTick(
      device,
    );
  }

  _dart_wgpuDeviceTick _wgpuDeviceTick;

  void wgpuDeviceReference(
    ffi.Pointer<WGPUDeviceImpl> device,
  ) {
    _wgpuDeviceReference ??= _dylib.lookupFunction<_c_wgpuDeviceReference,
        _dart_wgpuDeviceReference>('wgpuDeviceReference');
    return _wgpuDeviceReference(
      device,
    );
  }

  _dart_wgpuDeviceReference _wgpuDeviceReference;

  void wgpuDeviceRelease(
    ffi.Pointer<WGPUDeviceImpl> device,
  ) {
    _wgpuDeviceRelease ??=
        _dylib.lookupFunction<_c_wgpuDeviceRelease, _dart_wgpuDeviceRelease>(
            'wgpuDeviceRelease');
    return _wgpuDeviceRelease(
      device,
    );
  }

  _dart_wgpuDeviceRelease _wgpuDeviceRelease;

  int wgpuFenceGetCompletedValue(
    ffi.Pointer<WGPUFenceImpl> fence,
  ) {
    _wgpuFenceGetCompletedValue ??= _dylib.lookupFunction<
        _c_wgpuFenceGetCompletedValue,
        _dart_wgpuFenceGetCompletedValue>('wgpuFenceGetCompletedValue');
    return _wgpuFenceGetCompletedValue(
      fence,
    );
  }

  _dart_wgpuFenceGetCompletedValue _wgpuFenceGetCompletedValue;

  void wgpuFenceOnCompletion(
    ffi.Pointer<WGPUFenceImpl> fence,
    int value,
    ffi.Pointer<ffi.NativeFunction<WGPUFenceOnCompletionCallback>> callback,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    _wgpuFenceOnCompletion ??= _dylib.lookupFunction<_c_wgpuFenceOnCompletion,
        _dart_wgpuFenceOnCompletion>('wgpuFenceOnCompletion');
    return _wgpuFenceOnCompletion(
      fence,
      value,
      callback,
      userdata,
    );
  }

  _dart_wgpuFenceOnCompletion _wgpuFenceOnCompletion;

  void wgpuFenceReference(
    ffi.Pointer<WGPUFenceImpl> fence,
  ) {
    _wgpuFenceReference ??=
        _dylib.lookupFunction<_c_wgpuFenceReference, _dart_wgpuFenceReference>(
            'wgpuFenceReference');
    return _wgpuFenceReference(
      fence,
    );
  }

  _dart_wgpuFenceReference _wgpuFenceReference;

  void wgpuFenceRelease(
    ffi.Pointer<WGPUFenceImpl> fence,
  ) {
    _wgpuFenceRelease ??=
        _dylib.lookupFunction<_c_wgpuFenceRelease, _dart_wgpuFenceRelease>(
            'wgpuFenceRelease');
    return _wgpuFenceRelease(
      fence,
    );
  }

  _dart_wgpuFenceRelease _wgpuFenceRelease;

  ffi.Pointer<WGPUSurfaceImpl> wgpuInstanceCreateSurface(
    ffi.Pointer<WGPUInstanceImpl> instance,
    ffi.Pointer<WGPUSurfaceDescriptor> descriptor,
  ) {
    _wgpuInstanceCreateSurface ??= _dylib.lookupFunction<
        _c_wgpuInstanceCreateSurface,
        _dart_wgpuInstanceCreateSurface>('wgpuInstanceCreateSurface');
    return _wgpuInstanceCreateSurface(
      instance,
      descriptor,
    );
  }

  _dart_wgpuInstanceCreateSurface _wgpuInstanceCreateSurface;

  void wgpuInstanceReference(
    ffi.Pointer<WGPUInstanceImpl> instance,
  ) {
    _wgpuInstanceReference ??= _dylib.lookupFunction<_c_wgpuInstanceReference,
        _dart_wgpuInstanceReference>('wgpuInstanceReference');
    return _wgpuInstanceReference(
      instance,
    );
  }

  _dart_wgpuInstanceReference _wgpuInstanceReference;

  void wgpuInstanceRelease(
    ffi.Pointer<WGPUInstanceImpl> instance,
  ) {
    _wgpuInstanceRelease ??= _dylib.lookupFunction<_c_wgpuInstanceRelease,
        _dart_wgpuInstanceRelease>('wgpuInstanceRelease');
    return _wgpuInstanceRelease(
      instance,
    );
  }

  _dart_wgpuInstanceRelease _wgpuInstanceRelease;

  void wgpuPipelineLayoutReference(
    ffi.Pointer<WGPUPipelineLayoutImpl> pipelineLayout,
  ) {
    _wgpuPipelineLayoutReference ??= _dylib.lookupFunction<
        _c_wgpuPipelineLayoutReference,
        _dart_wgpuPipelineLayoutReference>('wgpuPipelineLayoutReference');
    return _wgpuPipelineLayoutReference(
      pipelineLayout,
    );
  }

  _dart_wgpuPipelineLayoutReference _wgpuPipelineLayoutReference;

  void wgpuPipelineLayoutRelease(
    ffi.Pointer<WGPUPipelineLayoutImpl> pipelineLayout,
  ) {
    _wgpuPipelineLayoutRelease ??= _dylib.lookupFunction<
        _c_wgpuPipelineLayoutRelease,
        _dart_wgpuPipelineLayoutRelease>('wgpuPipelineLayoutRelease');
    return _wgpuPipelineLayoutRelease(
      pipelineLayout,
    );
  }

  _dart_wgpuPipelineLayoutRelease _wgpuPipelineLayoutRelease;

  void wgpuQuerySetDestroy(
    ffi.Pointer<WGPUQuerySetImpl> querySet,
  ) {
    _wgpuQuerySetDestroy ??= _dylib.lookupFunction<_c_wgpuQuerySetDestroy,
        _dart_wgpuQuerySetDestroy>('wgpuQuerySetDestroy');
    return _wgpuQuerySetDestroy(
      querySet,
    );
  }

  _dart_wgpuQuerySetDestroy _wgpuQuerySetDestroy;

  void wgpuQuerySetReference(
    ffi.Pointer<WGPUQuerySetImpl> querySet,
  ) {
    _wgpuQuerySetReference ??= _dylib.lookupFunction<_c_wgpuQuerySetReference,
        _dart_wgpuQuerySetReference>('wgpuQuerySetReference');
    return _wgpuQuerySetReference(
      querySet,
    );
  }

  _dart_wgpuQuerySetReference _wgpuQuerySetReference;

  void wgpuQuerySetRelease(
    ffi.Pointer<WGPUQuerySetImpl> querySet,
  ) {
    _wgpuQuerySetRelease ??= _dylib.lookupFunction<_c_wgpuQuerySetRelease,
        _dart_wgpuQuerySetRelease>('wgpuQuerySetRelease');
    return _wgpuQuerySetRelease(
      querySet,
    );
  }

  _dart_wgpuQuerySetRelease _wgpuQuerySetRelease;

  void wgpuQueueCopyTextureForBrowser(
    ffi.Pointer<WGPUQueueImpl> queue,
    ffi.Pointer<WGPUTextureCopyView> source,
    ffi.Pointer<WGPUTextureCopyView> destination,
    ffi.Pointer<WGPUExtent3D> copySize,
    ffi.Pointer<WGPUCopyTextureForBrowserOptions> options,
  ) {
    _wgpuQueueCopyTextureForBrowser ??= _dylib.lookupFunction<
        _c_wgpuQueueCopyTextureForBrowser,
        _dart_wgpuQueueCopyTextureForBrowser>('wgpuQueueCopyTextureForBrowser');
    return _wgpuQueueCopyTextureForBrowser(
      queue,
      source,
      destination,
      copySize,
      options,
    );
  }

  _dart_wgpuQueueCopyTextureForBrowser _wgpuQueueCopyTextureForBrowser;

  ffi.Pointer<WGPUFenceImpl> wgpuQueueCreateFence(
    ffi.Pointer<WGPUQueueImpl> queue,
    ffi.Pointer<WGPUFenceDescriptor> descriptor,
  ) {
    _wgpuQueueCreateFence ??= _dylib.lookupFunction<_c_wgpuQueueCreateFence,
        _dart_wgpuQueueCreateFence>('wgpuQueueCreateFence');
    return _wgpuQueueCreateFence(
      queue,
      descriptor,
    );
  }

  _dart_wgpuQueueCreateFence _wgpuQueueCreateFence;

  void wgpuQueueSignal(
    ffi.Pointer<WGPUQueueImpl> queue,
    ffi.Pointer<WGPUFenceImpl> fence,
    int signalValue,
  ) {
    _wgpuQueueSignal ??=
        _dylib.lookupFunction<_c_wgpuQueueSignal, _dart_wgpuQueueSignal>(
            'wgpuQueueSignal');
    return _wgpuQueueSignal(
      queue,
      fence,
      signalValue,
    );
  }

  _dart_wgpuQueueSignal _wgpuQueueSignal;

  void wgpuQueueSubmit(
    ffi.Pointer<WGPUQueueImpl> queue,
    int commandCount,
    ffi.Pointer<ffi.Pointer<WGPUCommandBufferImpl>> commands,
  ) {
    _wgpuQueueSubmit ??=
        _dylib.lookupFunction<_c_wgpuQueueSubmit, _dart_wgpuQueueSubmit>(
            'wgpuQueueSubmit');
    return _wgpuQueueSubmit(
      queue,
      commandCount,
      commands,
    );
  }

  _dart_wgpuQueueSubmit _wgpuQueueSubmit;

  void wgpuQueueWriteBuffer(
    ffi.Pointer<WGPUQueueImpl> queue,
    ffi.Pointer<WGPUBufferImpl> buffer,
    int bufferOffset,
    ffi.Pointer<ffi.Void> data,
    int size,
  ) {
    _wgpuQueueWriteBuffer ??= _dylib.lookupFunction<_c_wgpuQueueWriteBuffer,
        _dart_wgpuQueueWriteBuffer>('wgpuQueueWriteBuffer');
    return _wgpuQueueWriteBuffer(
      queue,
      buffer,
      bufferOffset,
      data,
      size,
    );
  }

  _dart_wgpuQueueWriteBuffer _wgpuQueueWriteBuffer;

  void wgpuQueueWriteTexture(
    ffi.Pointer<WGPUQueueImpl> queue,
    ffi.Pointer<WGPUTextureCopyView> destination,
    ffi.Pointer<ffi.Void> data,
    int dataSize,
    ffi.Pointer<WGPUTextureDataLayout> dataLayout,
    ffi.Pointer<WGPUExtent3D> writeSize,
  ) {
    _wgpuQueueWriteTexture ??= _dylib.lookupFunction<_c_wgpuQueueWriteTexture,
        _dart_wgpuQueueWriteTexture>('wgpuQueueWriteTexture');
    return _wgpuQueueWriteTexture(
      queue,
      destination,
      data,
      dataSize,
      dataLayout,
      writeSize,
    );
  }

  _dart_wgpuQueueWriteTexture _wgpuQueueWriteTexture;

  void wgpuQueueReference(
    ffi.Pointer<WGPUQueueImpl> queue,
  ) {
    _wgpuQueueReference ??=
        _dylib.lookupFunction<_c_wgpuQueueReference, _dart_wgpuQueueReference>(
            'wgpuQueueReference');
    return _wgpuQueueReference(
      queue,
    );
  }

  _dart_wgpuQueueReference _wgpuQueueReference;

  void wgpuQueueRelease(
    ffi.Pointer<WGPUQueueImpl> queue,
  ) {
    _wgpuQueueRelease ??=
        _dylib.lookupFunction<_c_wgpuQueueRelease, _dart_wgpuQueueRelease>(
            'wgpuQueueRelease');
    return _wgpuQueueRelease(
      queue,
    );
  }

  _dart_wgpuQueueRelease _wgpuQueueRelease;

  void wgpuRenderBundleReference(
    ffi.Pointer<WGPURenderBundleImpl> renderBundle,
  ) {
    _wgpuRenderBundleReference ??= _dylib.lookupFunction<
        _c_wgpuRenderBundleReference,
        _dart_wgpuRenderBundleReference>('wgpuRenderBundleReference');
    return _wgpuRenderBundleReference(
      renderBundle,
    );
  }

  _dart_wgpuRenderBundleReference _wgpuRenderBundleReference;

  void wgpuRenderBundleRelease(
    ffi.Pointer<WGPURenderBundleImpl> renderBundle,
  ) {
    _wgpuRenderBundleRelease ??= _dylib.lookupFunction<
        _c_wgpuRenderBundleRelease,
        _dart_wgpuRenderBundleRelease>('wgpuRenderBundleRelease');
    return _wgpuRenderBundleRelease(
      renderBundle,
    );
  }

  _dart_wgpuRenderBundleRelease _wgpuRenderBundleRelease;

  void wgpuRenderBundleEncoderDraw(
    ffi.Pointer<WGPURenderBundleEncoderImpl> renderBundleEncoder,
    int vertexCount,
    int instanceCount,
    int firstVertex,
    int firstInstance,
  ) {
    _wgpuRenderBundleEncoderDraw ??= _dylib.lookupFunction<
        _c_wgpuRenderBundleEncoderDraw,
        _dart_wgpuRenderBundleEncoderDraw>('wgpuRenderBundleEncoderDraw');
    return _wgpuRenderBundleEncoderDraw(
      renderBundleEncoder,
      vertexCount,
      instanceCount,
      firstVertex,
      firstInstance,
    );
  }

  _dart_wgpuRenderBundleEncoderDraw _wgpuRenderBundleEncoderDraw;

  void wgpuRenderBundleEncoderDrawIndexed(
    ffi.Pointer<WGPURenderBundleEncoderImpl> renderBundleEncoder,
    int indexCount,
    int instanceCount,
    int firstIndex,
    int baseVertex,
    int firstInstance,
  ) {
    _wgpuRenderBundleEncoderDrawIndexed ??= _dylib.lookupFunction<
            _c_wgpuRenderBundleEncoderDrawIndexed,
            _dart_wgpuRenderBundleEncoderDrawIndexed>(
        'wgpuRenderBundleEncoderDrawIndexed');
    return _wgpuRenderBundleEncoderDrawIndexed(
      renderBundleEncoder,
      indexCount,
      instanceCount,
      firstIndex,
      baseVertex,
      firstInstance,
    );
  }

  _dart_wgpuRenderBundleEncoderDrawIndexed _wgpuRenderBundleEncoderDrawIndexed;

  void wgpuRenderBundleEncoderDrawIndexedIndirect(
    ffi.Pointer<WGPURenderBundleEncoderImpl> renderBundleEncoder,
    ffi.Pointer<WGPUBufferImpl> indirectBuffer,
    int indirectOffset,
  ) {
    _wgpuRenderBundleEncoderDrawIndexedIndirect ??= _dylib.lookupFunction<
            _c_wgpuRenderBundleEncoderDrawIndexedIndirect,
            _dart_wgpuRenderBundleEncoderDrawIndexedIndirect>(
        'wgpuRenderBundleEncoderDrawIndexedIndirect');
    return _wgpuRenderBundleEncoderDrawIndexedIndirect(
      renderBundleEncoder,
      indirectBuffer,
      indirectOffset,
    );
  }

  _dart_wgpuRenderBundleEncoderDrawIndexedIndirect
      _wgpuRenderBundleEncoderDrawIndexedIndirect;

  void wgpuRenderBundleEncoderDrawIndirect(
    ffi.Pointer<WGPURenderBundleEncoderImpl> renderBundleEncoder,
    ffi.Pointer<WGPUBufferImpl> indirectBuffer,
    int indirectOffset,
  ) {
    _wgpuRenderBundleEncoderDrawIndirect ??= _dylib.lookupFunction<
            _c_wgpuRenderBundleEncoderDrawIndirect,
            _dart_wgpuRenderBundleEncoderDrawIndirect>(
        'wgpuRenderBundleEncoderDrawIndirect');
    return _wgpuRenderBundleEncoderDrawIndirect(
      renderBundleEncoder,
      indirectBuffer,
      indirectOffset,
    );
  }

  _dart_wgpuRenderBundleEncoderDrawIndirect
      _wgpuRenderBundleEncoderDrawIndirect;

  ffi.Pointer<WGPURenderBundleImpl> wgpuRenderBundleEncoderFinish(
    ffi.Pointer<WGPURenderBundleEncoderImpl> renderBundleEncoder,
    ffi.Pointer<WGPURenderBundleDescriptor> descriptor,
  ) {
    _wgpuRenderBundleEncoderFinish ??= _dylib.lookupFunction<
        _c_wgpuRenderBundleEncoderFinish,
        _dart_wgpuRenderBundleEncoderFinish>('wgpuRenderBundleEncoderFinish');
    return _wgpuRenderBundleEncoderFinish(
      renderBundleEncoder,
      descriptor,
    );
  }

  _dart_wgpuRenderBundleEncoderFinish _wgpuRenderBundleEncoderFinish;

  void wgpuRenderBundleEncoderInsertDebugMarker(
    ffi.Pointer<WGPURenderBundleEncoderImpl> renderBundleEncoder,
    ffi.Pointer<ffi.Int8> markerLabel,
  ) {
    _wgpuRenderBundleEncoderInsertDebugMarker ??= _dylib.lookupFunction<
            _c_wgpuRenderBundleEncoderInsertDebugMarker,
            _dart_wgpuRenderBundleEncoderInsertDebugMarker>(
        'wgpuRenderBundleEncoderInsertDebugMarker');
    return _wgpuRenderBundleEncoderInsertDebugMarker(
      renderBundleEncoder,
      markerLabel,
    );
  }

  _dart_wgpuRenderBundleEncoderInsertDebugMarker
      _wgpuRenderBundleEncoderInsertDebugMarker;

  void wgpuRenderBundleEncoderPopDebugGroup(
    ffi.Pointer<WGPURenderBundleEncoderImpl> renderBundleEncoder,
  ) {
    _wgpuRenderBundleEncoderPopDebugGroup ??= _dylib.lookupFunction<
            _c_wgpuRenderBundleEncoderPopDebugGroup,
            _dart_wgpuRenderBundleEncoderPopDebugGroup>(
        'wgpuRenderBundleEncoderPopDebugGroup');
    return _wgpuRenderBundleEncoderPopDebugGroup(
      renderBundleEncoder,
    );
  }

  _dart_wgpuRenderBundleEncoderPopDebugGroup
      _wgpuRenderBundleEncoderPopDebugGroup;

  void wgpuRenderBundleEncoderPushDebugGroup(
    ffi.Pointer<WGPURenderBundleEncoderImpl> renderBundleEncoder,
    ffi.Pointer<ffi.Int8> groupLabel,
  ) {
    _wgpuRenderBundleEncoderPushDebugGroup ??= _dylib.lookupFunction<
            _c_wgpuRenderBundleEncoderPushDebugGroup,
            _dart_wgpuRenderBundleEncoderPushDebugGroup>(
        'wgpuRenderBundleEncoderPushDebugGroup');
    return _wgpuRenderBundleEncoderPushDebugGroup(
      renderBundleEncoder,
      groupLabel,
    );
  }

  _dart_wgpuRenderBundleEncoderPushDebugGroup
      _wgpuRenderBundleEncoderPushDebugGroup;

  void wgpuRenderBundleEncoderSetBindGroup(
    ffi.Pointer<WGPURenderBundleEncoderImpl> renderBundleEncoder,
    int groupIndex,
    ffi.Pointer<WGPUBindGroupImpl> group,
    int dynamicOffsetCount,
    ffi.Pointer<ffi.Uint32> dynamicOffsets,
  ) {
    _wgpuRenderBundleEncoderSetBindGroup ??= _dylib.lookupFunction<
            _c_wgpuRenderBundleEncoderSetBindGroup,
            _dart_wgpuRenderBundleEncoderSetBindGroup>(
        'wgpuRenderBundleEncoderSetBindGroup');
    return _wgpuRenderBundleEncoderSetBindGroup(
      renderBundleEncoder,
      groupIndex,
      group,
      dynamicOffsetCount,
      dynamicOffsets,
    );
  }

  _dart_wgpuRenderBundleEncoderSetBindGroup
      _wgpuRenderBundleEncoderSetBindGroup;

  void wgpuRenderBundleEncoderSetIndexBuffer(
    ffi.Pointer<WGPURenderBundleEncoderImpl> renderBundleEncoder,
    ffi.Pointer<WGPUBufferImpl> buffer,
    int format,
    int offset,
    int size,
  ) {
    _wgpuRenderBundleEncoderSetIndexBuffer ??= _dylib.lookupFunction<
            _c_wgpuRenderBundleEncoderSetIndexBuffer,
            _dart_wgpuRenderBundleEncoderSetIndexBuffer>(
        'wgpuRenderBundleEncoderSetIndexBuffer');
    return _wgpuRenderBundleEncoderSetIndexBuffer(
      renderBundleEncoder,
      buffer,
      format,
      offset,
      size,
    );
  }

  _dart_wgpuRenderBundleEncoderSetIndexBuffer
      _wgpuRenderBundleEncoderSetIndexBuffer;

  void wgpuRenderBundleEncoderSetIndexBufferWithFormat(
    ffi.Pointer<WGPURenderBundleEncoderImpl> renderBundleEncoder,
    ffi.Pointer<WGPUBufferImpl> buffer,
    int format,
    int offset,
    int size,
  ) {
    _wgpuRenderBundleEncoderSetIndexBufferWithFormat ??= _dylib.lookupFunction<
            _c_wgpuRenderBundleEncoderSetIndexBufferWithFormat,
            _dart_wgpuRenderBundleEncoderSetIndexBufferWithFormat>(
        'wgpuRenderBundleEncoderSetIndexBufferWithFormat');
    return _wgpuRenderBundleEncoderSetIndexBufferWithFormat(
      renderBundleEncoder,
      buffer,
      format,
      offset,
      size,
    );
  }

  _dart_wgpuRenderBundleEncoderSetIndexBufferWithFormat
      _wgpuRenderBundleEncoderSetIndexBufferWithFormat;

  void wgpuRenderBundleEncoderSetPipeline(
    ffi.Pointer<WGPURenderBundleEncoderImpl> renderBundleEncoder,
    ffi.Pointer<WGPURenderPipelineImpl> pipeline,
  ) {
    _wgpuRenderBundleEncoderSetPipeline ??= _dylib.lookupFunction<
            _c_wgpuRenderBundleEncoderSetPipeline,
            _dart_wgpuRenderBundleEncoderSetPipeline>(
        'wgpuRenderBundleEncoderSetPipeline');
    return _wgpuRenderBundleEncoderSetPipeline(
      renderBundleEncoder,
      pipeline,
    );
  }

  _dart_wgpuRenderBundleEncoderSetPipeline _wgpuRenderBundleEncoderSetPipeline;

  void wgpuRenderBundleEncoderSetVertexBuffer(
    ffi.Pointer<WGPURenderBundleEncoderImpl> renderBundleEncoder,
    int slot,
    ffi.Pointer<WGPUBufferImpl> buffer,
    int offset,
    int size,
  ) {
    _wgpuRenderBundleEncoderSetVertexBuffer ??= _dylib.lookupFunction<
            _c_wgpuRenderBundleEncoderSetVertexBuffer,
            _dart_wgpuRenderBundleEncoderSetVertexBuffer>(
        'wgpuRenderBundleEncoderSetVertexBuffer');
    return _wgpuRenderBundleEncoderSetVertexBuffer(
      renderBundleEncoder,
      slot,
      buffer,
      offset,
      size,
    );
  }

  _dart_wgpuRenderBundleEncoderSetVertexBuffer
      _wgpuRenderBundleEncoderSetVertexBuffer;

  void wgpuRenderBundleEncoderReference(
    ffi.Pointer<WGPURenderBundleEncoderImpl> renderBundleEncoder,
  ) {
    _wgpuRenderBundleEncoderReference ??= _dylib.lookupFunction<
            _c_wgpuRenderBundleEncoderReference,
            _dart_wgpuRenderBundleEncoderReference>(
        'wgpuRenderBundleEncoderReference');
    return _wgpuRenderBundleEncoderReference(
      renderBundleEncoder,
    );
  }

  _dart_wgpuRenderBundleEncoderReference _wgpuRenderBundleEncoderReference;

  void wgpuRenderBundleEncoderRelease(
    ffi.Pointer<WGPURenderBundleEncoderImpl> renderBundleEncoder,
  ) {
    _wgpuRenderBundleEncoderRelease ??= _dylib.lookupFunction<
        _c_wgpuRenderBundleEncoderRelease,
        _dart_wgpuRenderBundleEncoderRelease>('wgpuRenderBundleEncoderRelease');
    return _wgpuRenderBundleEncoderRelease(
      renderBundleEncoder,
    );
  }

  _dart_wgpuRenderBundleEncoderRelease _wgpuRenderBundleEncoderRelease;

  void wgpuRenderPassEncoderBeginOcclusionQuery(
    ffi.Pointer<WGPURenderPassEncoderImpl> renderPassEncoder,
    int queryIndex,
  ) {
    _wgpuRenderPassEncoderBeginOcclusionQuery ??= _dylib.lookupFunction<
            _c_wgpuRenderPassEncoderBeginOcclusionQuery,
            _dart_wgpuRenderPassEncoderBeginOcclusionQuery>(
        'wgpuRenderPassEncoderBeginOcclusionQuery');
    return _wgpuRenderPassEncoderBeginOcclusionQuery(
      renderPassEncoder,
      queryIndex,
    );
  }

  _dart_wgpuRenderPassEncoderBeginOcclusionQuery
      _wgpuRenderPassEncoderBeginOcclusionQuery;

  void wgpuRenderPassEncoderDraw(
    ffi.Pointer<WGPURenderPassEncoderImpl> renderPassEncoder,
    int vertexCount,
    int instanceCount,
    int firstVertex,
    int firstInstance,
  ) {
    _wgpuRenderPassEncoderDraw ??= _dylib.lookupFunction<
        _c_wgpuRenderPassEncoderDraw,
        _dart_wgpuRenderPassEncoderDraw>('wgpuRenderPassEncoderDraw');
    return _wgpuRenderPassEncoderDraw(
      renderPassEncoder,
      vertexCount,
      instanceCount,
      firstVertex,
      firstInstance,
    );
  }

  _dart_wgpuRenderPassEncoderDraw _wgpuRenderPassEncoderDraw;

  void wgpuRenderPassEncoderDrawIndexed(
    ffi.Pointer<WGPURenderPassEncoderImpl> renderPassEncoder,
    int indexCount,
    int instanceCount,
    int firstIndex,
    int baseVertex,
    int firstInstance,
  ) {
    _wgpuRenderPassEncoderDrawIndexed ??= _dylib.lookupFunction<
            _c_wgpuRenderPassEncoderDrawIndexed,
            _dart_wgpuRenderPassEncoderDrawIndexed>(
        'wgpuRenderPassEncoderDrawIndexed');
    return _wgpuRenderPassEncoderDrawIndexed(
      renderPassEncoder,
      indexCount,
      instanceCount,
      firstIndex,
      baseVertex,
      firstInstance,
    );
  }

  _dart_wgpuRenderPassEncoderDrawIndexed _wgpuRenderPassEncoderDrawIndexed;

  void wgpuRenderPassEncoderDrawIndexedIndirect(
    ffi.Pointer<WGPURenderPassEncoderImpl> renderPassEncoder,
    ffi.Pointer<WGPUBufferImpl> indirectBuffer,
    int indirectOffset,
  ) {
    _wgpuRenderPassEncoderDrawIndexedIndirect ??= _dylib.lookupFunction<
            _c_wgpuRenderPassEncoderDrawIndexedIndirect,
            _dart_wgpuRenderPassEncoderDrawIndexedIndirect>(
        'wgpuRenderPassEncoderDrawIndexedIndirect');
    return _wgpuRenderPassEncoderDrawIndexedIndirect(
      renderPassEncoder,
      indirectBuffer,
      indirectOffset,
    );
  }

  _dart_wgpuRenderPassEncoderDrawIndexedIndirect
      _wgpuRenderPassEncoderDrawIndexedIndirect;

  void wgpuRenderPassEncoderDrawIndirect(
    ffi.Pointer<WGPURenderPassEncoderImpl> renderPassEncoder,
    ffi.Pointer<WGPUBufferImpl> indirectBuffer,
    int indirectOffset,
  ) {
    _wgpuRenderPassEncoderDrawIndirect ??= _dylib.lookupFunction<
            _c_wgpuRenderPassEncoderDrawIndirect,
            _dart_wgpuRenderPassEncoderDrawIndirect>(
        'wgpuRenderPassEncoderDrawIndirect');
    return _wgpuRenderPassEncoderDrawIndirect(
      renderPassEncoder,
      indirectBuffer,
      indirectOffset,
    );
  }

  _dart_wgpuRenderPassEncoderDrawIndirect _wgpuRenderPassEncoderDrawIndirect;

  void wgpuRenderPassEncoderEndOcclusionQuery(
    ffi.Pointer<WGPURenderPassEncoderImpl> renderPassEncoder,
  ) {
    _wgpuRenderPassEncoderEndOcclusionQuery ??= _dylib.lookupFunction<
            _c_wgpuRenderPassEncoderEndOcclusionQuery,
            _dart_wgpuRenderPassEncoderEndOcclusionQuery>(
        'wgpuRenderPassEncoderEndOcclusionQuery');
    return _wgpuRenderPassEncoderEndOcclusionQuery(
      renderPassEncoder,
    );
  }

  _dart_wgpuRenderPassEncoderEndOcclusionQuery
      _wgpuRenderPassEncoderEndOcclusionQuery;

  void wgpuRenderPassEncoderEndPass(
    ffi.Pointer<WGPURenderPassEncoderImpl> renderPassEncoder,
  ) {
    _wgpuRenderPassEncoderEndPass ??= _dylib.lookupFunction<
        _c_wgpuRenderPassEncoderEndPass,
        _dart_wgpuRenderPassEncoderEndPass>('wgpuRenderPassEncoderEndPass');
    return _wgpuRenderPassEncoderEndPass(
      renderPassEncoder,
    );
  }

  _dart_wgpuRenderPassEncoderEndPass _wgpuRenderPassEncoderEndPass;

  void wgpuRenderPassEncoderExecuteBundles(
    ffi.Pointer<WGPURenderPassEncoderImpl> renderPassEncoder,
    int bundlesCount,
    ffi.Pointer<ffi.Pointer<WGPURenderBundleImpl>> bundles,
  ) {
    _wgpuRenderPassEncoderExecuteBundles ??= _dylib.lookupFunction<
            _c_wgpuRenderPassEncoderExecuteBundles,
            _dart_wgpuRenderPassEncoderExecuteBundles>(
        'wgpuRenderPassEncoderExecuteBundles');
    return _wgpuRenderPassEncoderExecuteBundles(
      renderPassEncoder,
      bundlesCount,
      bundles,
    );
  }

  _dart_wgpuRenderPassEncoderExecuteBundles
      _wgpuRenderPassEncoderExecuteBundles;

  void wgpuRenderPassEncoderInsertDebugMarker(
    ffi.Pointer<WGPURenderPassEncoderImpl> renderPassEncoder,
    ffi.Pointer<ffi.Int8> markerLabel,
  ) {
    _wgpuRenderPassEncoderInsertDebugMarker ??= _dylib.lookupFunction<
            _c_wgpuRenderPassEncoderInsertDebugMarker,
            _dart_wgpuRenderPassEncoderInsertDebugMarker>(
        'wgpuRenderPassEncoderInsertDebugMarker');
    return _wgpuRenderPassEncoderInsertDebugMarker(
      renderPassEncoder,
      markerLabel,
    );
  }

  _dart_wgpuRenderPassEncoderInsertDebugMarker
      _wgpuRenderPassEncoderInsertDebugMarker;

  void wgpuRenderPassEncoderPopDebugGroup(
    ffi.Pointer<WGPURenderPassEncoderImpl> renderPassEncoder,
  ) {
    _wgpuRenderPassEncoderPopDebugGroup ??= _dylib.lookupFunction<
            _c_wgpuRenderPassEncoderPopDebugGroup,
            _dart_wgpuRenderPassEncoderPopDebugGroup>(
        'wgpuRenderPassEncoderPopDebugGroup');
    return _wgpuRenderPassEncoderPopDebugGroup(
      renderPassEncoder,
    );
  }

  _dart_wgpuRenderPassEncoderPopDebugGroup _wgpuRenderPassEncoderPopDebugGroup;

  void wgpuRenderPassEncoderPushDebugGroup(
    ffi.Pointer<WGPURenderPassEncoderImpl> renderPassEncoder,
    ffi.Pointer<ffi.Int8> groupLabel,
  ) {
    _wgpuRenderPassEncoderPushDebugGroup ??= _dylib.lookupFunction<
            _c_wgpuRenderPassEncoderPushDebugGroup,
            _dart_wgpuRenderPassEncoderPushDebugGroup>(
        'wgpuRenderPassEncoderPushDebugGroup');
    return _wgpuRenderPassEncoderPushDebugGroup(
      renderPassEncoder,
      groupLabel,
    );
  }

  _dart_wgpuRenderPassEncoderPushDebugGroup
      _wgpuRenderPassEncoderPushDebugGroup;

  void wgpuRenderPassEncoderSetBindGroup(
    ffi.Pointer<WGPURenderPassEncoderImpl> renderPassEncoder,
    int groupIndex,
    ffi.Pointer<WGPUBindGroupImpl> group,
    int dynamicOffsetCount,
    ffi.Pointer<ffi.Uint32> dynamicOffsets,
  ) {
    _wgpuRenderPassEncoderSetBindGroup ??= _dylib.lookupFunction<
            _c_wgpuRenderPassEncoderSetBindGroup,
            _dart_wgpuRenderPassEncoderSetBindGroup>(
        'wgpuRenderPassEncoderSetBindGroup');
    return _wgpuRenderPassEncoderSetBindGroup(
      renderPassEncoder,
      groupIndex,
      group,
      dynamicOffsetCount,
      dynamicOffsets,
    );
  }

  _dart_wgpuRenderPassEncoderSetBindGroup _wgpuRenderPassEncoderSetBindGroup;

  void wgpuRenderPassEncoderSetBlendColor(
    ffi.Pointer<WGPURenderPassEncoderImpl> renderPassEncoder,
    ffi.Pointer<WGPUColor> color,
  ) {
    _wgpuRenderPassEncoderSetBlendColor ??= _dylib.lookupFunction<
            _c_wgpuRenderPassEncoderSetBlendColor,
            _dart_wgpuRenderPassEncoderSetBlendColor>(
        'wgpuRenderPassEncoderSetBlendColor');
    return _wgpuRenderPassEncoderSetBlendColor(
      renderPassEncoder,
      color,
    );
  }

  _dart_wgpuRenderPassEncoderSetBlendColor _wgpuRenderPassEncoderSetBlendColor;

  void wgpuRenderPassEncoderSetIndexBuffer(
    ffi.Pointer<WGPURenderPassEncoderImpl> renderPassEncoder,
    ffi.Pointer<WGPUBufferImpl> buffer,
    int format,
    int offset,
    int size,
  ) {
    _wgpuRenderPassEncoderSetIndexBuffer ??= _dylib.lookupFunction<
            _c_wgpuRenderPassEncoderSetIndexBuffer,
            _dart_wgpuRenderPassEncoderSetIndexBuffer>(
        'wgpuRenderPassEncoderSetIndexBuffer');
    return _wgpuRenderPassEncoderSetIndexBuffer(
      renderPassEncoder,
      buffer,
      format,
      offset,
      size,
    );
  }

  _dart_wgpuRenderPassEncoderSetIndexBuffer
      _wgpuRenderPassEncoderSetIndexBuffer;

  void wgpuRenderPassEncoderSetIndexBufferWithFormat(
    ffi.Pointer<WGPURenderPassEncoderImpl> renderPassEncoder,
    ffi.Pointer<WGPUBufferImpl> buffer,
    int format,
    int offset,
    int size,
  ) {
    _wgpuRenderPassEncoderSetIndexBufferWithFormat ??= _dylib.lookupFunction<
            _c_wgpuRenderPassEncoderSetIndexBufferWithFormat,
            _dart_wgpuRenderPassEncoderSetIndexBufferWithFormat>(
        'wgpuRenderPassEncoderSetIndexBufferWithFormat');
    return _wgpuRenderPassEncoderSetIndexBufferWithFormat(
      renderPassEncoder,
      buffer,
      format,
      offset,
      size,
    );
  }

  _dart_wgpuRenderPassEncoderSetIndexBufferWithFormat
      _wgpuRenderPassEncoderSetIndexBufferWithFormat;

  void wgpuRenderPassEncoderSetPipeline(
    ffi.Pointer<WGPURenderPassEncoderImpl> renderPassEncoder,
    ffi.Pointer<WGPURenderPipelineImpl> pipeline,
  ) {
    _wgpuRenderPassEncoderSetPipeline ??= _dylib.lookupFunction<
            _c_wgpuRenderPassEncoderSetPipeline,
            _dart_wgpuRenderPassEncoderSetPipeline>(
        'wgpuRenderPassEncoderSetPipeline');
    return _wgpuRenderPassEncoderSetPipeline(
      renderPassEncoder,
      pipeline,
    );
  }

  _dart_wgpuRenderPassEncoderSetPipeline _wgpuRenderPassEncoderSetPipeline;

  void wgpuRenderPassEncoderSetScissorRect(
    ffi.Pointer<WGPURenderPassEncoderImpl> renderPassEncoder,
    int x,
    int y,
    int width,
    int height,
  ) {
    _wgpuRenderPassEncoderSetScissorRect ??= _dylib.lookupFunction<
            _c_wgpuRenderPassEncoderSetScissorRect,
            _dart_wgpuRenderPassEncoderSetScissorRect>(
        'wgpuRenderPassEncoderSetScissorRect');
    return _wgpuRenderPassEncoderSetScissorRect(
      renderPassEncoder,
      x,
      y,
      width,
      height,
    );
  }

  _dart_wgpuRenderPassEncoderSetScissorRect
      _wgpuRenderPassEncoderSetScissorRect;

  void wgpuRenderPassEncoderSetStencilReference(
    ffi.Pointer<WGPURenderPassEncoderImpl> renderPassEncoder,
    int reference,
  ) {
    _wgpuRenderPassEncoderSetStencilReference ??= _dylib.lookupFunction<
            _c_wgpuRenderPassEncoderSetStencilReference,
            _dart_wgpuRenderPassEncoderSetStencilReference>(
        'wgpuRenderPassEncoderSetStencilReference');
    return _wgpuRenderPassEncoderSetStencilReference(
      renderPassEncoder,
      reference,
    );
  }

  _dart_wgpuRenderPassEncoderSetStencilReference
      _wgpuRenderPassEncoderSetStencilReference;

  void wgpuRenderPassEncoderSetVertexBuffer(
    ffi.Pointer<WGPURenderPassEncoderImpl> renderPassEncoder,
    int slot,
    ffi.Pointer<WGPUBufferImpl> buffer,
    int offset,
    int size,
  ) {
    _wgpuRenderPassEncoderSetVertexBuffer ??= _dylib.lookupFunction<
            _c_wgpuRenderPassEncoderSetVertexBuffer,
            _dart_wgpuRenderPassEncoderSetVertexBuffer>(
        'wgpuRenderPassEncoderSetVertexBuffer');
    return _wgpuRenderPassEncoderSetVertexBuffer(
      renderPassEncoder,
      slot,
      buffer,
      offset,
      size,
    );
  }

  _dart_wgpuRenderPassEncoderSetVertexBuffer
      _wgpuRenderPassEncoderSetVertexBuffer;

  void wgpuRenderPassEncoderSetViewport(
    ffi.Pointer<WGPURenderPassEncoderImpl> renderPassEncoder,
    double x,
    double y,
    double width,
    double height,
    double minDepth,
    double maxDepth,
  ) {
    _wgpuRenderPassEncoderSetViewport ??= _dylib.lookupFunction<
            _c_wgpuRenderPassEncoderSetViewport,
            _dart_wgpuRenderPassEncoderSetViewport>(
        'wgpuRenderPassEncoderSetViewport');
    return _wgpuRenderPassEncoderSetViewport(
      renderPassEncoder,
      x,
      y,
      width,
      height,
      minDepth,
      maxDepth,
    );
  }

  _dart_wgpuRenderPassEncoderSetViewport _wgpuRenderPassEncoderSetViewport;

  void wgpuRenderPassEncoderWriteTimestamp(
    ffi.Pointer<WGPURenderPassEncoderImpl> renderPassEncoder,
    ffi.Pointer<WGPUQuerySetImpl> querySet,
    int queryIndex,
  ) {
    _wgpuRenderPassEncoderWriteTimestamp ??= _dylib.lookupFunction<
            _c_wgpuRenderPassEncoderWriteTimestamp,
            _dart_wgpuRenderPassEncoderWriteTimestamp>(
        'wgpuRenderPassEncoderWriteTimestamp');
    return _wgpuRenderPassEncoderWriteTimestamp(
      renderPassEncoder,
      querySet,
      queryIndex,
    );
  }

  _dart_wgpuRenderPassEncoderWriteTimestamp
      _wgpuRenderPassEncoderWriteTimestamp;

  void wgpuRenderPassEncoderReference(
    ffi.Pointer<WGPURenderPassEncoderImpl> renderPassEncoder,
  ) {
    _wgpuRenderPassEncoderReference ??= _dylib.lookupFunction<
        _c_wgpuRenderPassEncoderReference,
        _dart_wgpuRenderPassEncoderReference>('wgpuRenderPassEncoderReference');
    return _wgpuRenderPassEncoderReference(
      renderPassEncoder,
    );
  }

  _dart_wgpuRenderPassEncoderReference _wgpuRenderPassEncoderReference;

  void wgpuRenderPassEncoderRelease(
    ffi.Pointer<WGPURenderPassEncoderImpl> renderPassEncoder,
  ) {
    _wgpuRenderPassEncoderRelease ??= _dylib.lookupFunction<
        _c_wgpuRenderPassEncoderRelease,
        _dart_wgpuRenderPassEncoderRelease>('wgpuRenderPassEncoderRelease');
    return _wgpuRenderPassEncoderRelease(
      renderPassEncoder,
    );
  }

  _dart_wgpuRenderPassEncoderRelease _wgpuRenderPassEncoderRelease;

  ffi.Pointer<WGPUBindGroupLayoutImpl> wgpuRenderPipelineGetBindGroupLayout(
    ffi.Pointer<WGPURenderPipelineImpl> renderPipeline,
    int groupIndex,
  ) {
    _wgpuRenderPipelineGetBindGroupLayout ??= _dylib.lookupFunction<
            _c_wgpuRenderPipelineGetBindGroupLayout,
            _dart_wgpuRenderPipelineGetBindGroupLayout>(
        'wgpuRenderPipelineGetBindGroupLayout');
    return _wgpuRenderPipelineGetBindGroupLayout(
      renderPipeline,
      groupIndex,
    );
  }

  _dart_wgpuRenderPipelineGetBindGroupLayout
      _wgpuRenderPipelineGetBindGroupLayout;

  void wgpuRenderPipelineReference(
    ffi.Pointer<WGPURenderPipelineImpl> renderPipeline,
  ) {
    _wgpuRenderPipelineReference ??= _dylib.lookupFunction<
        _c_wgpuRenderPipelineReference,
        _dart_wgpuRenderPipelineReference>('wgpuRenderPipelineReference');
    return _wgpuRenderPipelineReference(
      renderPipeline,
    );
  }

  _dart_wgpuRenderPipelineReference _wgpuRenderPipelineReference;

  void wgpuRenderPipelineRelease(
    ffi.Pointer<WGPURenderPipelineImpl> renderPipeline,
  ) {
    _wgpuRenderPipelineRelease ??= _dylib.lookupFunction<
        _c_wgpuRenderPipelineRelease,
        _dart_wgpuRenderPipelineRelease>('wgpuRenderPipelineRelease');
    return _wgpuRenderPipelineRelease(
      renderPipeline,
    );
  }

  _dart_wgpuRenderPipelineRelease _wgpuRenderPipelineRelease;

  void wgpuSamplerReference(
    ffi.Pointer<WGPUSamplerImpl> sampler,
  ) {
    _wgpuSamplerReference ??= _dylib.lookupFunction<_c_wgpuSamplerReference,
        _dart_wgpuSamplerReference>('wgpuSamplerReference');
    return _wgpuSamplerReference(
      sampler,
    );
  }

  _dart_wgpuSamplerReference _wgpuSamplerReference;

  void wgpuSamplerRelease(
    ffi.Pointer<WGPUSamplerImpl> sampler,
  ) {
    _wgpuSamplerRelease ??=
        _dylib.lookupFunction<_c_wgpuSamplerRelease, _dart_wgpuSamplerRelease>(
            'wgpuSamplerRelease');
    return _wgpuSamplerRelease(
      sampler,
    );
  }

  _dart_wgpuSamplerRelease _wgpuSamplerRelease;

  void wgpuShaderModuleReference(
    ffi.Pointer<WGPUShaderModuleImpl> shaderModule,
  ) {
    _wgpuShaderModuleReference ??= _dylib.lookupFunction<
        _c_wgpuShaderModuleReference,
        _dart_wgpuShaderModuleReference>('wgpuShaderModuleReference');
    return _wgpuShaderModuleReference(
      shaderModule,
    );
  }

  _dart_wgpuShaderModuleReference _wgpuShaderModuleReference;

  void wgpuShaderModuleRelease(
    ffi.Pointer<WGPUShaderModuleImpl> shaderModule,
  ) {
    _wgpuShaderModuleRelease ??= _dylib.lookupFunction<
        _c_wgpuShaderModuleRelease,
        _dart_wgpuShaderModuleRelease>('wgpuShaderModuleRelease');
    return _wgpuShaderModuleRelease(
      shaderModule,
    );
  }

  _dart_wgpuShaderModuleRelease _wgpuShaderModuleRelease;

  void wgpuSurfaceReference(
    ffi.Pointer<WGPUSurfaceImpl> surface,
  ) {
    _wgpuSurfaceReference ??= _dylib.lookupFunction<_c_wgpuSurfaceReference,
        _dart_wgpuSurfaceReference>('wgpuSurfaceReference');
    return _wgpuSurfaceReference(
      surface,
    );
  }

  _dart_wgpuSurfaceReference _wgpuSurfaceReference;

  void wgpuSurfaceRelease(
    ffi.Pointer<WGPUSurfaceImpl> surface,
  ) {
    _wgpuSurfaceRelease ??=
        _dylib.lookupFunction<_c_wgpuSurfaceRelease, _dart_wgpuSurfaceRelease>(
            'wgpuSurfaceRelease');
    return _wgpuSurfaceRelease(
      surface,
    );
  }

  _dart_wgpuSurfaceRelease _wgpuSurfaceRelease;

  void wgpuSwapChainConfigure(
    ffi.Pointer<WGPUSwapChainImpl> swapChain,
    int format,
    int allowedUsage,
    int width,
    int height,
  ) {
    _wgpuSwapChainConfigure ??= _dylib.lookupFunction<_c_wgpuSwapChainConfigure,
        _dart_wgpuSwapChainConfigure>('wgpuSwapChainConfigure');
    return _wgpuSwapChainConfigure(
      swapChain,
      format,
      allowedUsage,
      width,
      height,
    );
  }

  _dart_wgpuSwapChainConfigure _wgpuSwapChainConfigure;

  ffi.Pointer<WGPUTextureViewImpl> wgpuSwapChainGetCurrentTextureView(
    ffi.Pointer<WGPUSwapChainImpl> swapChain,
  ) {
    _wgpuSwapChainGetCurrentTextureView ??= _dylib.lookupFunction<
            _c_wgpuSwapChainGetCurrentTextureView,
            _dart_wgpuSwapChainGetCurrentTextureView>(
        'wgpuSwapChainGetCurrentTextureView');
    return _wgpuSwapChainGetCurrentTextureView(
      swapChain,
    );
  }

  _dart_wgpuSwapChainGetCurrentTextureView _wgpuSwapChainGetCurrentTextureView;

  void wgpuSwapChainPresent(
    ffi.Pointer<WGPUSwapChainImpl> swapChain,
  ) {
    _wgpuSwapChainPresent ??= _dylib.lookupFunction<_c_wgpuSwapChainPresent,
        _dart_wgpuSwapChainPresent>('wgpuSwapChainPresent');
    return _wgpuSwapChainPresent(
      swapChain,
    );
  }

  _dart_wgpuSwapChainPresent _wgpuSwapChainPresent;

  void wgpuSwapChainReference(
    ffi.Pointer<WGPUSwapChainImpl> swapChain,
  ) {
    _wgpuSwapChainReference ??= _dylib.lookupFunction<_c_wgpuSwapChainReference,
        _dart_wgpuSwapChainReference>('wgpuSwapChainReference');
    return _wgpuSwapChainReference(
      swapChain,
    );
  }

  _dart_wgpuSwapChainReference _wgpuSwapChainReference;

  void wgpuSwapChainRelease(
    ffi.Pointer<WGPUSwapChainImpl> swapChain,
  ) {
    _wgpuSwapChainRelease ??= _dylib.lookupFunction<_c_wgpuSwapChainRelease,
        _dart_wgpuSwapChainRelease>('wgpuSwapChainRelease');
    return _wgpuSwapChainRelease(
      swapChain,
    );
  }

  _dart_wgpuSwapChainRelease _wgpuSwapChainRelease;

  ffi.Pointer<WGPUTextureViewImpl> wgpuTextureCreateView(
    ffi.Pointer<WGPUTextureImpl> texture,
    ffi.Pointer<WGPUTextureViewDescriptor> descriptor,
  ) {
    _wgpuTextureCreateView ??= _dylib.lookupFunction<_c_wgpuTextureCreateView,
        _dart_wgpuTextureCreateView>('wgpuTextureCreateView');
    return _wgpuTextureCreateView(
      texture,
      descriptor,
    );
  }

  _dart_wgpuTextureCreateView _wgpuTextureCreateView;

  void wgpuTextureDestroy(
    ffi.Pointer<WGPUTextureImpl> texture,
  ) {
    _wgpuTextureDestroy ??=
        _dylib.lookupFunction<_c_wgpuTextureDestroy, _dart_wgpuTextureDestroy>(
            'wgpuTextureDestroy');
    return _wgpuTextureDestroy(
      texture,
    );
  }

  _dart_wgpuTextureDestroy _wgpuTextureDestroy;

  void wgpuTextureReference(
    ffi.Pointer<WGPUTextureImpl> texture,
  ) {
    _wgpuTextureReference ??= _dylib.lookupFunction<_c_wgpuTextureReference,
        _dart_wgpuTextureReference>('wgpuTextureReference');
    return _wgpuTextureReference(
      texture,
    );
  }

  _dart_wgpuTextureReference _wgpuTextureReference;

  void wgpuTextureRelease(
    ffi.Pointer<WGPUTextureImpl> texture,
  ) {
    _wgpuTextureRelease ??=
        _dylib.lookupFunction<_c_wgpuTextureRelease, _dart_wgpuTextureRelease>(
            'wgpuTextureRelease');
    return _wgpuTextureRelease(
      texture,
    );
  }

  _dart_wgpuTextureRelease _wgpuTextureRelease;

  void wgpuTextureViewReference(
    ffi.Pointer<WGPUTextureViewImpl> textureView,
  ) {
    _wgpuTextureViewReference ??= _dylib.lookupFunction<
        _c_wgpuTextureViewReference,
        _dart_wgpuTextureViewReference>('wgpuTextureViewReference');
    return _wgpuTextureViewReference(
      textureView,
    );
  }

  _dart_wgpuTextureViewReference _wgpuTextureViewReference;

  void wgpuTextureViewRelease(
    ffi.Pointer<WGPUTextureViewImpl> textureView,
  ) {
    _wgpuTextureViewRelease ??= _dylib.lookupFunction<_c_wgpuTextureViewRelease,
        _dart_wgpuTextureViewRelease>('wgpuTextureViewRelease');
    return _wgpuTextureViewRelease(
      textureView,
    );
  }

  _dart_wgpuTextureViewRelease _wgpuTextureViewRelease;
}

class WGPUBindGroupImpl extends ffi.Struct {}

class WGPUBindGroupLayoutImpl extends ffi.Struct {}

class WGPUBufferImpl extends ffi.Struct {}

class WGPUCommandBufferImpl extends ffi.Struct {}

class WGPUCommandEncoderImpl extends ffi.Struct {}

class WGPUComputePassEncoderImpl extends ffi.Struct {}

class WGPUComputePipelineImpl extends ffi.Struct {}

class WGPUDeviceImpl extends ffi.Struct {}

class WGPUFenceImpl extends ffi.Struct {}

class WGPUInstanceImpl extends ffi.Struct {}

class WGPUPipelineLayoutImpl extends ffi.Struct {}

class WGPUQuerySetImpl extends ffi.Struct {}

class WGPUQueueImpl extends ffi.Struct {}

class WGPURenderBundleImpl extends ffi.Struct {}

class WGPURenderBundleEncoderImpl extends ffi.Struct {}

class WGPURenderPassEncoderImpl extends ffi.Struct {}

class WGPURenderPipelineImpl extends ffi.Struct {}

class WGPUSamplerImpl extends ffi.Struct {}

class WGPUShaderModuleImpl extends ffi.Struct {}

class WGPUSurfaceImpl extends ffi.Struct {}

class WGPUSwapChainImpl extends ffi.Struct {}

class WGPUTextureImpl extends ffi.Struct {}

class WGPUTextureViewImpl extends ffi.Struct {}

abstract class WGPUAdapterType {
  static const int WGPUAdapterType_DiscreteGPU = 0;
  static const int WGPUAdapterType_IntegratedGPU = 1;
  static const int WGPUAdapterType_CPU = 2;
  static const int WGPUAdapterType_Unknown = 3;
  static const int WGPUAdapterType_Force32 = 2147483647;
}

abstract class WGPUAddressMode {
  static const int WGPUAddressMode_Repeat = 0;
  static const int WGPUAddressMode_MirrorRepeat = 1;
  static const int WGPUAddressMode_ClampToEdge = 2;
  static const int WGPUAddressMode_Force32 = 2147483647;
}

abstract class WGPUBackendType {
  static const int WGPUBackendType_Null = 0;
  static const int WGPUBackendType_D3D11 = 1;
  static const int WGPUBackendType_D3D12 = 2;
  static const int WGPUBackendType_Metal = 3;
  static const int WGPUBackendType_Vulkan = 4;
  static const int WGPUBackendType_OpenGL = 5;
  static const int WGPUBackendType_OpenGLES = 6;
  static const int WGPUBackendType_Force32 = 2147483647;
}

abstract class WGPUBindingType {
  static const int WGPUBindingType_Undefined = 0;
  static const int WGPUBindingType_UniformBuffer = 1;
  static const int WGPUBindingType_StorageBuffer = 2;
  static const int WGPUBindingType_ReadonlyStorageBuffer = 3;
  static const int WGPUBindingType_Sampler = 4;
  static const int WGPUBindingType_ComparisonSampler = 5;
  static const int WGPUBindingType_SampledTexture = 6;
  static const int WGPUBindingType_MultisampledTexture = 7;
  static const int WGPUBindingType_ReadonlyStorageTexture = 8;
  static const int WGPUBindingType_WriteonlyStorageTexture = 9;
  static const int WGPUBindingType_Force32 = 2147483647;
}

abstract class WGPUBlendFactor {
  static const int WGPUBlendFactor_Zero = 0;
  static const int WGPUBlendFactor_One = 1;
  static const int WGPUBlendFactor_SrcColor = 2;
  static const int WGPUBlendFactor_OneMinusSrcColor = 3;
  static const int WGPUBlendFactor_SrcAlpha = 4;
  static const int WGPUBlendFactor_OneMinusSrcAlpha = 5;
  static const int WGPUBlendFactor_DstColor = 6;
  static const int WGPUBlendFactor_OneMinusDstColor = 7;
  static const int WGPUBlendFactor_DstAlpha = 8;
  static const int WGPUBlendFactor_OneMinusDstAlpha = 9;
  static const int WGPUBlendFactor_SrcAlphaSaturated = 10;
  static const int WGPUBlendFactor_BlendColor = 11;
  static const int WGPUBlendFactor_OneMinusBlendColor = 12;
  static const int WGPUBlendFactor_Force32 = 2147483647;
}

abstract class WGPUBlendOperation {
  static const int WGPUBlendOperation_Add = 0;
  static const int WGPUBlendOperation_Subtract = 1;
  static const int WGPUBlendOperation_ReverseSubtract = 2;
  static const int WGPUBlendOperation_Min = 3;
  static const int WGPUBlendOperation_Max = 4;
  static const int WGPUBlendOperation_Force32 = 2147483647;
}

abstract class WGPUBufferBindingType {
  static const int WGPUBufferBindingType_Undefined = 0;
  static const int WGPUBufferBindingType_Uniform = 1;
  static const int WGPUBufferBindingType_Storage = 2;
  static const int WGPUBufferBindingType_ReadOnlyStorage = 3;
  static const int WGPUBufferBindingType_Force32 = 2147483647;
}

abstract class WGPUBufferMapAsyncStatus {
  static const int WGPUBufferMapAsyncStatus_Success = 0;
  static const int WGPUBufferMapAsyncStatus_Error = 1;
  static const int WGPUBufferMapAsyncStatus_Unknown = 2;
  static const int WGPUBufferMapAsyncStatus_DeviceLost = 3;
  static const int WGPUBufferMapAsyncStatus_DestroyedBeforeCallback = 4;
  static const int WGPUBufferMapAsyncStatus_UnmappedBeforeCallback = 5;
  static const int WGPUBufferMapAsyncStatus_Force32 = 2147483647;
}

abstract class WGPUCompareFunction {
  static const int WGPUCompareFunction_Undefined = 0;
  static const int WGPUCompareFunction_Never = 1;
  static const int WGPUCompareFunction_Less = 2;
  static const int WGPUCompareFunction_LessEqual = 3;
  static const int WGPUCompareFunction_Greater = 4;
  static const int WGPUCompareFunction_GreaterEqual = 5;
  static const int WGPUCompareFunction_Equal = 6;
  static const int WGPUCompareFunction_NotEqual = 7;
  static const int WGPUCompareFunction_Always = 8;
  static const int WGPUCompareFunction_Force32 = 2147483647;
}

abstract class WGPUCreateReadyPipelineStatus {
  static const int WGPUCreateReadyPipelineStatus_Success = 0;
  static const int WGPUCreateReadyPipelineStatus_Error = 1;
  static const int WGPUCreateReadyPipelineStatus_DeviceLost = 2;
  static const int WGPUCreateReadyPipelineStatus_DeviceDestroyed = 3;
  static const int WGPUCreateReadyPipelineStatus_Unknown = 4;
  static const int WGPUCreateReadyPipelineStatus_Force32 = 2147483647;
}

abstract class WGPUCullMode {
  static const int WGPUCullMode_None = 0;
  static const int WGPUCullMode_Front = 1;
  static const int WGPUCullMode_Back = 2;
  static const int WGPUCullMode_Force32 = 2147483647;
}

abstract class WGPUErrorFilter {
  static const int WGPUErrorFilter_None = 0;
  static const int WGPUErrorFilter_Validation = 1;
  static const int WGPUErrorFilter_OutOfMemory = 2;
  static const int WGPUErrorFilter_Force32 = 2147483647;
}

abstract class WGPUErrorType {
  static const int WGPUErrorType_NoError = 0;
  static const int WGPUErrorType_Validation = 1;
  static const int WGPUErrorType_OutOfMemory = 2;
  static const int WGPUErrorType_Unknown = 3;
  static const int WGPUErrorType_DeviceLost = 4;
  static const int WGPUErrorType_Force32 = 2147483647;
}

abstract class WGPUFenceCompletionStatus {
  static const int WGPUFenceCompletionStatus_Success = 0;
  static const int WGPUFenceCompletionStatus_Error = 1;
  static const int WGPUFenceCompletionStatus_Unknown = 2;
  static const int WGPUFenceCompletionStatus_DeviceLost = 3;
  static const int WGPUFenceCompletionStatus_Force32 = 2147483647;
}

abstract class WGPUFilterMode {
  static const int WGPUFilterMode_Nearest = 0;
  static const int WGPUFilterMode_Linear = 1;
  static const int WGPUFilterMode_Force32 = 2147483647;
}

abstract class WGPUFrontFace {
  static const int WGPUFrontFace_CCW = 0;
  static const int WGPUFrontFace_CW = 1;
  static const int WGPUFrontFace_Force32 = 2147483647;
}

abstract class WGPUIndexFormat {
  static const int WGPUIndexFormat_Undefined = 0;
  static const int WGPUIndexFormat_Uint16 = 1;
  static const int WGPUIndexFormat_Uint32 = 2;
  static const int WGPUIndexFormat_Force32 = 2147483647;
}

abstract class WGPUInputStepMode {
  static const int WGPUInputStepMode_Vertex = 0;
  static const int WGPUInputStepMode_Instance = 1;
  static const int WGPUInputStepMode_Force32 = 2147483647;
}

abstract class WGPULoadOp {
  static const int WGPULoadOp_Clear = 0;
  static const int WGPULoadOp_Load = 1;
  static const int WGPULoadOp_Force32 = 2147483647;
}

abstract class WGPUPipelineStatisticName {
  static const int WGPUPipelineStatisticName_VertexShaderInvocations = 0;
  static const int WGPUPipelineStatisticName_ClipperInvocations = 1;
  static const int WGPUPipelineStatisticName_ClipperPrimitivesOut = 2;
  static const int WGPUPipelineStatisticName_FragmentShaderInvocations = 3;
  static const int WGPUPipelineStatisticName_ComputeShaderInvocations = 4;
  static const int WGPUPipelineStatisticName_Force32 = 2147483647;
}

abstract class WGPUPresentMode {
  static const int WGPUPresentMode_Immediate = 0;
  static const int WGPUPresentMode_Mailbox = 1;
  static const int WGPUPresentMode_Fifo = 2;
  static const int WGPUPresentMode_Force32 = 2147483647;
}

abstract class WGPUPrimitiveTopology {
  static const int WGPUPrimitiveTopology_PointList = 0;
  static const int WGPUPrimitiveTopology_LineList = 1;
  static const int WGPUPrimitiveTopology_LineStrip = 2;
  static const int WGPUPrimitiveTopology_TriangleList = 3;
  static const int WGPUPrimitiveTopology_TriangleStrip = 4;
  static const int WGPUPrimitiveTopology_Force32 = 2147483647;
}

abstract class WGPUQueryType {
  static const int WGPUQueryType_Occlusion = 0;
  static const int WGPUQueryType_PipelineStatistics = 1;
  static const int WGPUQueryType_Timestamp = 2;
  static const int WGPUQueryType_Force32 = 2147483647;
}

abstract class WGPUSType {
  static const int WGPUSType_Invalid = 0;
  static const int WGPUSType_SurfaceDescriptorFromMetalLayer = 1;
  static const int WGPUSType_SurfaceDescriptorFromWindowsHWND = 2;
  static const int WGPUSType_SurfaceDescriptorFromXlib = 3;
  static const int WGPUSType_SurfaceDescriptorFromCanvasHTMLSelector = 4;
  static const int WGPUSType_ShaderModuleSPIRVDescriptor = 5;
  static const int WGPUSType_ShaderModuleWGSLDescriptor = 6;
  static const int WGPUSType_SamplerDescriptorDummyAnisotropicFiltering = 7;
  static const int WGPUSType_RenderPipelineDescriptorDummyExtension = 8;
  static const int WGPUSType_Force32 = 2147483647;
}

abstract class WGPUSamplerBindingType {
  static const int WGPUSamplerBindingType_Undefined = 0;
  static const int WGPUSamplerBindingType_Filtering = 1;
  static const int WGPUSamplerBindingType_NonFiltering = 2;
  static const int WGPUSamplerBindingType_Comparison = 3;
  static const int WGPUSamplerBindingType_Force32 = 2147483647;
}

abstract class WGPUStencilOperation {
  static const int WGPUStencilOperation_Keep = 0;
  static const int WGPUStencilOperation_Zero = 1;
  static const int WGPUStencilOperation_Replace = 2;
  static const int WGPUStencilOperation_Invert = 3;
  static const int WGPUStencilOperation_IncrementClamp = 4;
  static const int WGPUStencilOperation_DecrementClamp = 5;
  static const int WGPUStencilOperation_IncrementWrap = 6;
  static const int WGPUStencilOperation_DecrementWrap = 7;
  static const int WGPUStencilOperation_Force32 = 2147483647;
}

abstract class WGPUStorageTextureAccess {
  static const int WGPUStorageTextureAccess_Undefined = 0;
  static const int WGPUStorageTextureAccess_ReadOnly = 1;
  static const int WGPUStorageTextureAccess_WriteOnly = 2;
  static const int WGPUStorageTextureAccess_Force32 = 2147483647;
}

abstract class WGPUStoreOp {
  static const int WGPUStoreOp_Store = 0;
  static const int WGPUStoreOp_Clear = 1;
  static const int WGPUStoreOp_Force32 = 2147483647;
}

abstract class WGPUTextureAspect {
  static const int WGPUTextureAspect_All = 0;
  static const int WGPUTextureAspect_StencilOnly = 1;
  static const int WGPUTextureAspect_DepthOnly = 2;
  static const int WGPUTextureAspect_Force32 = 2147483647;
}

abstract class WGPUTextureComponentType {
  static const int WGPUTextureComponentType_Float = 0;
  static const int WGPUTextureComponentType_Sint = 1;
  static const int WGPUTextureComponentType_Uint = 2;
  static const int WGPUTextureComponentType_DepthComparison = 3;
  static const int WGPUTextureComponentType_Force32 = 2147483647;
}

abstract class WGPUTextureDimension {
  static const int WGPUTextureDimension_1D = 0;
  static const int WGPUTextureDimension_2D = 1;
  static const int WGPUTextureDimension_3D = 2;
  static const int WGPUTextureDimension_Force32 = 2147483647;
}

abstract class WGPUTextureFormat {
  static const int WGPUTextureFormat_Undefined = 0;
  static const int WGPUTextureFormat_R8Unorm = 1;
  static const int WGPUTextureFormat_R8Snorm = 2;
  static const int WGPUTextureFormat_R8Uint = 3;
  static const int WGPUTextureFormat_R8Sint = 4;
  static const int WGPUTextureFormat_R16Uint = 5;
  static const int WGPUTextureFormat_R16Sint = 6;
  static const int WGPUTextureFormat_R16Float = 7;
  static const int WGPUTextureFormat_RG8Unorm = 8;
  static const int WGPUTextureFormat_RG8Snorm = 9;
  static const int WGPUTextureFormat_RG8Uint = 10;
  static const int WGPUTextureFormat_RG8Sint = 11;
  static const int WGPUTextureFormat_R32Float = 12;
  static const int WGPUTextureFormat_R32Uint = 13;
  static const int WGPUTextureFormat_R32Sint = 14;
  static const int WGPUTextureFormat_RG16Uint = 15;
  static const int WGPUTextureFormat_RG16Sint = 16;
  static const int WGPUTextureFormat_RG16Float = 17;
  static const int WGPUTextureFormat_RGBA8Unorm = 18;
  static const int WGPUTextureFormat_RGBA8UnormSrgb = 19;
  static const int WGPUTextureFormat_RGBA8Snorm = 20;
  static const int WGPUTextureFormat_RGBA8Uint = 21;
  static const int WGPUTextureFormat_RGBA8Sint = 22;
  static const int WGPUTextureFormat_BGRA8Unorm = 23;
  static const int WGPUTextureFormat_BGRA8UnormSrgb = 24;
  static const int WGPUTextureFormat_RGB10A2Unorm = 25;
  static const int WGPUTextureFormat_RG11B10Ufloat = 26;
  static const int WGPUTextureFormat_RGB9E5Ufloat = 27;
  static const int WGPUTextureFormat_RG32Float = 28;
  static const int WGPUTextureFormat_RG32Uint = 29;
  static const int WGPUTextureFormat_RG32Sint = 30;
  static const int WGPUTextureFormat_RGBA16Uint = 31;
  static const int WGPUTextureFormat_RGBA16Sint = 32;
  static const int WGPUTextureFormat_RGBA16Float = 33;
  static const int WGPUTextureFormat_RGBA32Float = 34;
  static const int WGPUTextureFormat_RGBA32Uint = 35;
  static const int WGPUTextureFormat_RGBA32Sint = 36;
  static const int WGPUTextureFormat_Depth32Float = 37;
  static const int WGPUTextureFormat_Depth24Plus = 38;
  static const int WGPUTextureFormat_Depth24PlusStencil8 = 39;
  static const int WGPUTextureFormat_BC1RGBAUnorm = 40;
  static const int WGPUTextureFormat_BC1RGBAUnormSrgb = 41;
  static const int WGPUTextureFormat_BC2RGBAUnorm = 42;
  static const int WGPUTextureFormat_BC2RGBAUnormSrgb = 43;
  static const int WGPUTextureFormat_BC3RGBAUnorm = 44;
  static const int WGPUTextureFormat_BC3RGBAUnormSrgb = 45;
  static const int WGPUTextureFormat_BC4RUnorm = 46;
  static const int WGPUTextureFormat_BC4RSnorm = 47;
  static const int WGPUTextureFormat_BC5RGUnorm = 48;
  static const int WGPUTextureFormat_BC5RGSnorm = 49;
  static const int WGPUTextureFormat_BC6HRGBUfloat = 50;
  static const int WGPUTextureFormat_BC6HRGBFloat = 51;
  static const int WGPUTextureFormat_BC7RGBAUnorm = 52;
  static const int WGPUTextureFormat_BC7RGBAUnormSrgb = 53;
  static const int WGPUTextureFormat_Force32 = 2147483647;
}

abstract class WGPUTextureSampleType {
  static const int WGPUTextureSampleType_Undefined = 0;
  static const int WGPUTextureSampleType_Float = 1;
  static const int WGPUTextureSampleType_UnfilterableFloat = 2;
  static const int WGPUTextureSampleType_Depth = 3;
  static const int WGPUTextureSampleType_Sint = 4;
  static const int WGPUTextureSampleType_Uint = 5;
  static const int WGPUTextureSampleType_Force32 = 2147483647;
}

abstract class WGPUTextureViewDimension {
  static const int WGPUTextureViewDimension_Undefined = 0;
  static const int WGPUTextureViewDimension_1D = 1;
  static const int WGPUTextureViewDimension_2D = 2;
  static const int WGPUTextureViewDimension_2DArray = 3;
  static const int WGPUTextureViewDimension_Cube = 4;
  static const int WGPUTextureViewDimension_CubeArray = 5;
  static const int WGPUTextureViewDimension_3D = 6;
  static const int WGPUTextureViewDimension_Force32 = 2147483647;
}

abstract class WGPUVertexFormat {
  static const int WGPUVertexFormat_UChar2 = 0;
  static const int WGPUVertexFormat_UChar4 = 1;
  static const int WGPUVertexFormat_Char2 = 2;
  static const int WGPUVertexFormat_Char4 = 3;
  static const int WGPUVertexFormat_UChar2Norm = 4;
  static const int WGPUVertexFormat_UChar4Norm = 5;
  static const int WGPUVertexFormat_Char2Norm = 6;
  static const int WGPUVertexFormat_Char4Norm = 7;
  static const int WGPUVertexFormat_UShort2 = 8;
  static const int WGPUVertexFormat_UShort4 = 9;
  static const int WGPUVertexFormat_Short2 = 10;
  static const int WGPUVertexFormat_Short4 = 11;
  static const int WGPUVertexFormat_UShort2Norm = 12;
  static const int WGPUVertexFormat_UShort4Norm = 13;
  static const int WGPUVertexFormat_Short2Norm = 14;
  static const int WGPUVertexFormat_Short4Norm = 15;
  static const int WGPUVertexFormat_Half2 = 16;
  static const int WGPUVertexFormat_Half4 = 17;
  static const int WGPUVertexFormat_Float = 18;
  static const int WGPUVertexFormat_Float2 = 19;
  static const int WGPUVertexFormat_Float3 = 20;
  static const int WGPUVertexFormat_Float4 = 21;
  static const int WGPUVertexFormat_UInt = 22;
  static const int WGPUVertexFormat_UInt2 = 23;
  static const int WGPUVertexFormat_UInt3 = 24;
  static const int WGPUVertexFormat_UInt4 = 25;
  static const int WGPUVertexFormat_Int = 26;
  static const int WGPUVertexFormat_Int2 = 27;
  static const int WGPUVertexFormat_Int3 = 28;
  static const int WGPUVertexFormat_Int4 = 29;
  static const int WGPUVertexFormat_Force32 = 2147483647;
}

abstract class WGPUBufferUsage {
  static const int WGPUBufferUsage_None = 0;
  static const int WGPUBufferUsage_MapRead = 1;
  static const int WGPUBufferUsage_MapWrite = 2;
  static const int WGPUBufferUsage_CopySrc = 4;
  static const int WGPUBufferUsage_CopyDst = 8;
  static const int WGPUBufferUsage_Index = 16;
  static const int WGPUBufferUsage_Vertex = 32;
  static const int WGPUBufferUsage_Uniform = 64;
  static const int WGPUBufferUsage_Storage = 128;
  static const int WGPUBufferUsage_Indirect = 256;
  static const int WGPUBufferUsage_QueryResolve = 512;
  static const int WGPUBufferUsage_Force32 = 2147483647;
}

abstract class WGPUColorWriteMask {
  static const int WGPUColorWriteMask_None = 0;
  static const int WGPUColorWriteMask_Red = 1;
  static const int WGPUColorWriteMask_Green = 2;
  static const int WGPUColorWriteMask_Blue = 4;
  static const int WGPUColorWriteMask_Alpha = 8;
  static const int WGPUColorWriteMask_All = 15;
  static const int WGPUColorWriteMask_Force32 = 2147483647;
}

abstract class WGPUMapMode {
  static const int WGPUMapMode_None = 0;
  static const int WGPUMapMode_Read = 1;
  static const int WGPUMapMode_Write = 2;
  static const int WGPUMapMode_Force32 = 2147483647;
}

abstract class WGPUShaderStage {
  static const int WGPUShaderStage_None = 0;
  static const int WGPUShaderStage_Vertex = 1;
  static const int WGPUShaderStage_Fragment = 2;
  static const int WGPUShaderStage_Compute = 4;
  static const int WGPUShaderStage_Force32 = 2147483647;
}

abstract class WGPUTextureUsage {
  static const int WGPUTextureUsage_None = 0;
  static const int WGPUTextureUsage_CopySrc = 1;
  static const int WGPUTextureUsage_CopyDst = 2;
  static const int WGPUTextureUsage_Sampled = 4;
  static const int WGPUTextureUsage_Storage = 8;
  static const int WGPUTextureUsage_OutputAttachment = 16;
  static const int WGPUTextureUsage_RenderAttachment = 16;
  static const int WGPUTextureUsage_Present = 32;
  static const int WGPUTextureUsage_Force32 = 2147483647;
}

class WGPUChainedStruct extends ffi.Struct {
  ffi.Pointer<WGPUChainedStruct> next;

  @ffi.Int32()
  int sType;
}

class WGPUAdapterProperties extends ffi.Struct {
  ffi.Pointer<WGPUChainedStruct> nextInChain;

  @ffi.Uint32()
  int deviceID;

  @ffi.Uint32()
  int vendorID;

  ffi.Pointer<ffi.Int8> name;

  ffi.Pointer<ffi.Int8> driverDescription;

  @ffi.Int32()
  int adapterType;

  @ffi.Int32()
  int backendType;
}

class WGPUBindGroupEntry extends ffi.Struct {
  @ffi.Uint32()
  int binding;

  ffi.Pointer<WGPUBufferImpl> buffer;

  @ffi.Uint64()
  int offset;

  @ffi.Uint64()
  int size;

  ffi.Pointer<WGPUSamplerImpl> sampler;

  ffi.Pointer<WGPUTextureViewImpl> textureView;
}

class WGPUBlendDescriptor extends ffi.Struct {
  @ffi.Int32()
  int operation;

  @ffi.Int32()
  int srcFactor;

  @ffi.Int32()
  int dstFactor;
}

class WGPUBufferBindingLayout extends ffi.Struct {
  ffi.Pointer<WGPUChainedStruct> nextInChain;

  @ffi.Int32()
  int type;

  @ffi.Uint8()
  int hasDynamicOffset;

  @ffi.Uint64()
  int minBindingSize;
}

class WGPUBufferDescriptor extends ffi.Struct {
  ffi.Pointer<WGPUChainedStruct> nextInChain;

  ffi.Pointer<ffi.Int8> label;

  @ffi.Uint32()
  int usage;

  @ffi.Uint64()
  int size;

  @ffi.Uint8()
  int mappedAtCreation;
}

class WGPUColor extends ffi.Struct {
  @ffi.Double()
  double r;

  @ffi.Double()
  double g;

  @ffi.Double()
  double b;

  @ffi.Double()
  double a;
}

class WGPUCommandBufferDescriptor extends ffi.Struct {
  ffi.Pointer<WGPUChainedStruct> nextInChain;

  ffi.Pointer<ffi.Int8> label;
}

class WGPUCommandEncoderDescriptor extends ffi.Struct {
  ffi.Pointer<WGPUChainedStruct> nextInChain;

  ffi.Pointer<ffi.Int8> label;
}

class WGPUComputePassDescriptor extends ffi.Struct {
  ffi.Pointer<WGPUChainedStruct> nextInChain;

  ffi.Pointer<ffi.Int8> label;
}

class WGPUCopyTextureForBrowserOptions extends ffi.Struct {
  ffi.Pointer<WGPUChainedStruct> nextInChain;

  @ffi.Uint8()
  int flipY;
}

class WGPUDeviceProperties extends ffi.Struct {
  @ffi.Uint8()
  int textureCompressionBC;

  @ffi.Uint8()
  int shaderFloat16;

  @ffi.Uint8()
  int pipelineStatisticsQuery;

  @ffi.Uint8()
  int timestampQuery;
}

class WGPUExtent3D extends ffi.Struct {
  @ffi.Uint32()
  int width;

  @ffi.Uint32()
  int height;

  @ffi.Uint32()
  int depth;
}

class WGPUFenceDescriptor extends ffi.Struct {
  ffi.Pointer<WGPUChainedStruct> nextInChain;

  ffi.Pointer<ffi.Int8> label;

  @ffi.Uint64()
  int initialValue;
}

class WGPUInstanceDescriptor extends ffi.Struct {
  ffi.Pointer<WGPUChainedStruct> nextInChain;
}

class WGPUOrigin3D extends ffi.Struct {
  @ffi.Uint32()
  int x;

  @ffi.Uint32()
  int y;

  @ffi.Uint32()
  int z;
}

class WGPUPipelineLayoutDescriptor extends ffi.Struct {
  ffi.Pointer<WGPUChainedStruct> nextInChain;

  ffi.Pointer<ffi.Int8> label;

  @ffi.Uint32()
  int bindGroupLayoutCount;

  ffi.Pointer<ffi.Pointer<WGPUBindGroupLayoutImpl>> bindGroupLayouts;
}

class WGPUProgrammableStageDescriptor extends ffi.Struct {
  ffi.Pointer<WGPUChainedStruct> nextInChain;

  ffi.Pointer<WGPUShaderModuleImpl> module;

  ffi.Pointer<ffi.Int8> entryPoint;
}

class WGPUQuerySetDescriptor extends ffi.Struct {
  ffi.Pointer<WGPUChainedStruct> nextInChain;

  ffi.Pointer<ffi.Int8> label;

  @ffi.Int32()
  int type;

  @ffi.Uint32()
  int count;

  ffi.Pointer<ffi.Int32> pipelineStatistics;

  @ffi.Uint32()
  int pipelineStatisticsCount;
}

class WGPURasterizationStateDescriptor extends ffi.Struct {
  ffi.Pointer<WGPUChainedStruct> nextInChain;

  @ffi.Int32()
  int frontFace;

  @ffi.Int32()
  int cullMode;

  @ffi.Int32()
  int depthBias;

  @ffi.Float()
  double depthBiasSlopeScale;

  @ffi.Float()
  double depthBiasClamp;
}

class WGPURenderBundleDescriptor extends ffi.Struct {
  ffi.Pointer<WGPUChainedStruct> nextInChain;

  ffi.Pointer<ffi.Int8> label;
}

class WGPURenderBundleEncoderDescriptor extends ffi.Struct {
  ffi.Pointer<WGPUChainedStruct> nextInChain;

  ffi.Pointer<ffi.Int8> label;

  @ffi.Uint32()
  int colorFormatsCount;

  ffi.Pointer<ffi.Int32> colorFormats;

  @ffi.Int32()
  int depthStencilFormat;

  @ffi.Uint32()
  int sampleCount;
}

class WGPURenderPassDepthStencilAttachmentDescriptor extends ffi.Struct {
  ffi.Pointer<WGPUTextureViewImpl> attachment;

  @ffi.Int32()
  int depthLoadOp;

  @ffi.Int32()
  int depthStoreOp;

  @ffi.Float()
  double clearDepth;

  @ffi.Uint8()
  int depthReadOnly;

  @ffi.Int32()
  int stencilLoadOp;

  @ffi.Int32()
  int stencilStoreOp;

  @ffi.Uint32()
  int clearStencil;

  @ffi.Uint8()
  int stencilReadOnly;
}

class WGPUSamplerBindingLayout extends ffi.Struct {
  ffi.Pointer<WGPUChainedStruct> nextInChain;

  @ffi.Int32()
  int type;
}

class WGPUSamplerDescriptor extends ffi.Struct {
  ffi.Pointer<WGPUChainedStruct> nextInChain;

  ffi.Pointer<ffi.Int8> label;

  @ffi.Int32()
  int addressModeU;

  @ffi.Int32()
  int addressModeV;

  @ffi.Int32()
  int addressModeW;

  @ffi.Int32()
  int magFilter;

  @ffi.Int32()
  int minFilter;

  @ffi.Int32()
  int mipmapFilter;

  @ffi.Float()
  double lodMinClamp;

  @ffi.Float()
  double lodMaxClamp;

  @ffi.Int32()
  int compare;

  @ffi.Uint16()
  int maxAnisotropy;
}

class WGPUSamplerDescriptorDummyAnisotropicFiltering extends ffi.Struct {
  WGPUChainedStruct chain;

  @ffi.Float()
  double maxAnisotropy;
}

class WGPUShaderModuleDescriptor extends ffi.Struct {
  ffi.Pointer<WGPUChainedStruct> nextInChain;

  ffi.Pointer<ffi.Int8> label;
}

class WGPUShaderModuleSPIRVDescriptor extends ffi.Struct {
  WGPUChainedStruct chain;

  @ffi.Uint32()
  int codeSize;

  ffi.Pointer<ffi.Uint32> code;
}

class WGPUShaderModuleWGSLDescriptor extends ffi.Struct {
  WGPUChainedStruct chain;

  ffi.Pointer<ffi.Int8> source;
}

class WGPUStencilStateFaceDescriptor extends ffi.Struct {
  @ffi.Int32()
  int compare;

  @ffi.Int32()
  int failOp;

  @ffi.Int32()
  int depthFailOp;

  @ffi.Int32()
  int passOp;
}

class WGPUStorageTextureBindingLayout extends ffi.Struct {
  ffi.Pointer<WGPUChainedStruct> nextInChain;

  @ffi.Int32()
  int access;

  @ffi.Int32()
  int format;

  @ffi.Int32()
  int viewDimension;
}

class WGPUSurfaceDescriptor extends ffi.Struct {
  ffi.Pointer<WGPUChainedStruct> nextInChain;

  ffi.Pointer<ffi.Int8> label;
}

class WGPUSurfaceDescriptorFromCanvasHTMLSelector extends ffi.Struct {
  WGPUChainedStruct chain;

  ffi.Pointer<ffi.Int8> selector;
}

class WGPUSurfaceDescriptorFromMetalLayer extends ffi.Struct {
  WGPUChainedStruct chain;

  ffi.Pointer<ffi.Void> layer;
}

class WGPUSurfaceDescriptorFromWindowsHWND extends ffi.Struct {
  WGPUChainedStruct chain;

  ffi.Pointer<ffi.Void> hinstance;

  ffi.Pointer<ffi.Void> hwnd;
}

class WGPUSurfaceDescriptorFromXlib extends ffi.Struct {
  WGPUChainedStruct chain;

  ffi.Pointer<ffi.Void> display;

  @ffi.Uint32()
  int window;
}

class WGPUSwapChainDescriptor extends ffi.Struct {
  ffi.Pointer<WGPUChainedStruct> nextInChain;

  ffi.Pointer<ffi.Int8> label;

  @ffi.Uint32()
  int usage;

  @ffi.Int32()
  int format;

  @ffi.Uint32()
  int width;

  @ffi.Uint32()
  int height;

  @ffi.Int32()
  int presentMode;

  @ffi.Uint64()
  int implementation;
}

class WGPUTextureBindingLayout extends ffi.Struct {
  ffi.Pointer<WGPUChainedStruct> nextInChain;

  @ffi.Int32()
  int sampleType;

  @ffi.Int32()
  int viewDimension;

  @ffi.Uint8()
  int multisampled;
}

class WGPUTextureDataLayout extends ffi.Struct {
  ffi.Pointer<WGPUChainedStruct> nextInChain;

  @ffi.Uint64()
  int offset;

  @ffi.Uint32()
  int bytesPerRow;

  @ffi.Uint32()
  int rowsPerImage;
}

class WGPUTextureViewDescriptor extends ffi.Struct {
  ffi.Pointer<WGPUChainedStruct> nextInChain;

  ffi.Pointer<ffi.Int8> label;

  @ffi.Int32()
  int format;

  @ffi.Int32()
  int dimension;

  @ffi.Uint32()
  int baseMipLevel;

  @ffi.Uint32()
  int mipLevelCount;

  @ffi.Uint32()
  int baseArrayLayer;

  @ffi.Uint32()
  int arrayLayerCount;

  @ffi.Int32()
  int aspect;
}

class WGPUVertexAttributeDescriptor extends ffi.Struct {
  @ffi.Int32()
  int format;

  @ffi.Uint64()
  int offset;

  @ffi.Uint32()
  int shaderLocation;
}

class WGPUBindGroupDescriptor extends ffi.Struct {
  ffi.Pointer<WGPUChainedStruct> nextInChain;

  ffi.Pointer<ffi.Int8> label;

  ffi.Pointer<WGPUBindGroupLayoutImpl> layout;

  @ffi.Uint32()
  int entryCount;

  ffi.Pointer<WGPUBindGroupEntry> entries;
}

class WGPUBindGroupLayoutEntry extends ffi.Struct {
  @ffi.Uint32()
  int binding;

  @ffi.Uint32()
  int visibility;

  @ffi.Int32()
  int type;

  @ffi.Uint8()
  int hasDynamicOffset;

  @ffi.Uint64()
  int minBufferBindingSize;

  @ffi.Int32()
  int viewDimension;

  @ffi.Int32()
  int textureComponentType;

  @ffi.Int32()
  int storageTextureFormat;

  WGPUBufferBindingLayout buffer;

  WGPUSamplerBindingLayout sampler;

  WGPUTextureBindingLayout texture;

  WGPUStorageTextureBindingLayout storageTexture;
}

class WGPUBufferCopyView extends ffi.Struct {
  ffi.Pointer<WGPUChainedStruct> nextInChain;

  WGPUTextureDataLayout layout;

  ffi.Pointer<WGPUBufferImpl> buffer;
}

class WGPUColorStateDescriptor extends ffi.Struct {
  ffi.Pointer<WGPUChainedStruct> nextInChain;

  @ffi.Int32()
  int format;

  WGPUBlendDescriptor alphaBlend;

  WGPUBlendDescriptor colorBlend;

  @ffi.Uint32()
  int writeMask;
}

class WGPUComputePipelineDescriptor extends ffi.Struct {
  ffi.Pointer<WGPUChainedStruct> nextInChain;

  ffi.Pointer<ffi.Int8> label;

  ffi.Pointer<WGPUPipelineLayoutImpl> layout;

  WGPUProgrammableStageDescriptor computeStage;
}

class WGPUDepthStencilStateDescriptor extends ffi.Struct {
  ffi.Pointer<WGPUChainedStruct> nextInChain;

  @ffi.Int32()
  int format;

  @ffi.Uint8()
  int depthWriteEnabled;

  @ffi.Int32()
  int depthCompare;

  WGPUStencilStateFaceDescriptor stencilFront;

  WGPUStencilStateFaceDescriptor stencilBack;

  @ffi.Uint32()
  int stencilReadMask;

  @ffi.Uint32()
  int stencilWriteMask;
}

class WGPURenderPassColorAttachmentDescriptor extends ffi.Struct {
  ffi.Pointer<WGPUTextureViewImpl> attachment;

  ffi.Pointer<WGPUTextureViewImpl> resolveTarget;

  @ffi.Int32()
  int loadOp;

  @ffi.Int32()
  int storeOp;

  WGPUColor clearColor;
}

class WGPURenderPipelineDescriptorDummyExtension extends ffi.Struct {
  WGPUChainedStruct chain;

  WGPUProgrammableStageDescriptor dummyStage;
}

class WGPUTextureCopyView extends ffi.Struct {
  ffi.Pointer<WGPUChainedStruct> nextInChain;

  ffi.Pointer<WGPUTextureImpl> texture;

  @ffi.Uint32()
  int mipLevel;

  WGPUOrigin3D origin;

  @ffi.Int32()
  int aspect;
}

class WGPUTextureDescriptor extends ffi.Struct {
  ffi.Pointer<WGPUChainedStruct> nextInChain;

  ffi.Pointer<ffi.Int8> label;

  @ffi.Uint32()
  int usage;

  @ffi.Int32()
  int dimension;

  WGPUExtent3D size;

  @ffi.Int32()
  int format;

  @ffi.Uint32()
  int mipLevelCount;

  @ffi.Uint32()
  int sampleCount;
}

class WGPUVertexBufferLayoutDescriptor extends ffi.Struct {
  @ffi.Uint64()
  int arrayStride;

  @ffi.Int32()
  int stepMode;

  @ffi.Uint32()
  int attributeCount;

  ffi.Pointer<WGPUVertexAttributeDescriptor> attributes;
}

class WGPUBindGroupLayoutDescriptor extends ffi.Struct {
  ffi.Pointer<WGPUChainedStruct> nextInChain;

  ffi.Pointer<ffi.Int8> label;

  @ffi.Uint32()
  int entryCount;

  ffi.Pointer<WGPUBindGroupLayoutEntry> entries;
}

class WGPURenderPassDescriptor extends ffi.Struct {
  ffi.Pointer<WGPUChainedStruct> nextInChain;

  ffi.Pointer<ffi.Int8> label;

  @ffi.Uint32()
  int colorAttachmentCount;

  ffi.Pointer<WGPURenderPassColorAttachmentDescriptor> colorAttachments;

  ffi.Pointer<WGPURenderPassDepthStencilAttachmentDescriptor>
      depthStencilAttachment;

  ffi.Pointer<WGPUQuerySetImpl> occlusionQuerySet;
}

class WGPUVertexStateDescriptor extends ffi.Struct {
  ffi.Pointer<WGPUChainedStruct> nextInChain;

  @ffi.Int32()
  int indexFormat;

  @ffi.Uint32()
  int vertexBufferCount;

  ffi.Pointer<WGPUVertexBufferLayoutDescriptor> vertexBuffers;
}

class WGPURenderPipelineDescriptor extends ffi.Struct {
  ffi.Pointer<WGPUChainedStruct> nextInChain;

  ffi.Pointer<ffi.Int8> label;

  ffi.Pointer<WGPUPipelineLayoutImpl> layout;

  WGPUProgrammableStageDescriptor vertexStage;

  ffi.Pointer<WGPUProgrammableStageDescriptor> fragmentStage;

  ffi.Pointer<WGPUVertexStateDescriptor> vertexState;

  @ffi.Int32()
  int primitiveTopology;

  ffi.Pointer<WGPURasterizationStateDescriptor> rasterizationState;

  @ffi.Uint32()
  int sampleCount;

  ffi.Pointer<WGPUDepthStencilStateDescriptor> depthStencilState;

  @ffi.Uint32()
  int colorStateCount;

  ffi.Pointer<WGPUColorStateDescriptor> colorStates;

  @ffi.Uint32()
  int sampleMask;

  @ffi.Uint8()
  int alphaToCoverageEnabled;
}

const int WGPU_WHOLE_SIZE = -1;

const int WGPU_STRIDE_UNDEFINED = 4294967295;

const int WGPU_COPY_STRIDE_UNDEFINED = 4294967295;

typedef _c_wgpuCreateInstance = ffi.Pointer<WGPUInstanceImpl> Function(
  ffi.Pointer<WGPUInstanceDescriptor> descriptor,
);

typedef _dart_wgpuCreateInstance = ffi.Pointer<WGPUInstanceImpl> Function(
  ffi.Pointer<WGPUInstanceDescriptor> descriptor,
);

typedef WGPUProc = ffi.Void Function();

typedef _c_wgpuGetProcAddress = ffi.Pointer<ffi.NativeFunction<WGPUProc>>
    Function(
  ffi.Pointer<WGPUDeviceImpl> device,
  ffi.Pointer<ffi.Int8> procName,
);

typedef _dart_wgpuGetProcAddress = ffi.Pointer<ffi.NativeFunction<WGPUProc>>
    Function(
  ffi.Pointer<WGPUDeviceImpl> device,
  ffi.Pointer<ffi.Int8> procName,
);

typedef _c_wgpuBindGroupReference = ffi.Void Function(
  ffi.Pointer<WGPUBindGroupImpl> bindGroup,
);

typedef _dart_wgpuBindGroupReference = void Function(
  ffi.Pointer<WGPUBindGroupImpl> bindGroup,
);

typedef _c_wgpuBindGroupRelease = ffi.Void Function(
  ffi.Pointer<WGPUBindGroupImpl> bindGroup,
);

typedef _dart_wgpuBindGroupRelease = void Function(
  ffi.Pointer<WGPUBindGroupImpl> bindGroup,
);

typedef _c_wgpuBindGroupLayoutReference = ffi.Void Function(
  ffi.Pointer<WGPUBindGroupLayoutImpl> bindGroupLayout,
);

typedef _dart_wgpuBindGroupLayoutReference = void Function(
  ffi.Pointer<WGPUBindGroupLayoutImpl> bindGroupLayout,
);

typedef _c_wgpuBindGroupLayoutRelease = ffi.Void Function(
  ffi.Pointer<WGPUBindGroupLayoutImpl> bindGroupLayout,
);

typedef _dart_wgpuBindGroupLayoutRelease = void Function(
  ffi.Pointer<WGPUBindGroupLayoutImpl> bindGroupLayout,
);

typedef _c_wgpuBufferDestroy = ffi.Void Function(
  ffi.Pointer<WGPUBufferImpl> buffer,
);

typedef _dart_wgpuBufferDestroy = void Function(
  ffi.Pointer<WGPUBufferImpl> buffer,
);

typedef _c_wgpuBufferGetConstMappedRange = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<WGPUBufferImpl> buffer,
  ffi.Uint64 offset,
  ffi.Uint64 size,
);

typedef _dart_wgpuBufferGetConstMappedRange = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<WGPUBufferImpl> buffer,
  int offset,
  int size,
);

typedef _c_wgpuBufferGetMappedRange = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<WGPUBufferImpl> buffer,
  ffi.Uint64 offset,
  ffi.Uint64 size,
);

typedef _dart_wgpuBufferGetMappedRange = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<WGPUBufferImpl> buffer,
  int offset,
  int size,
);

typedef WGPUBufferMapCallback = ffi.Void Function(
  ffi.Int32,
  ffi.Pointer<ffi.Void>,
);

typedef _c_wgpuBufferMapAsync = ffi.Void Function(
  ffi.Pointer<WGPUBufferImpl> buffer,
  ffi.Uint32 mode,
  ffi.Uint64 offset,
  ffi.Uint64 size,
  ffi.Pointer<ffi.NativeFunction<WGPUBufferMapCallback>> callback,
  ffi.Pointer<ffi.Void> userdata,
);

typedef _dart_wgpuBufferMapAsync = void Function(
  ffi.Pointer<WGPUBufferImpl> buffer,
  int mode,
  int offset,
  int size,
  ffi.Pointer<ffi.NativeFunction<WGPUBufferMapCallback>> callback,
  ffi.Pointer<ffi.Void> userdata,
);

typedef _c_wgpuBufferUnmap = ffi.Void Function(
  ffi.Pointer<WGPUBufferImpl> buffer,
);

typedef _dart_wgpuBufferUnmap = void Function(
  ffi.Pointer<WGPUBufferImpl> buffer,
);

typedef _c_wgpuBufferReference = ffi.Void Function(
  ffi.Pointer<WGPUBufferImpl> buffer,
);

typedef _dart_wgpuBufferReference = void Function(
  ffi.Pointer<WGPUBufferImpl> buffer,
);

typedef _c_wgpuBufferRelease = ffi.Void Function(
  ffi.Pointer<WGPUBufferImpl> buffer,
);

typedef _dart_wgpuBufferRelease = void Function(
  ffi.Pointer<WGPUBufferImpl> buffer,
);

typedef _c_wgpuCommandBufferReference = ffi.Void Function(
  ffi.Pointer<WGPUCommandBufferImpl> commandBuffer,
);

typedef _dart_wgpuCommandBufferReference = void Function(
  ffi.Pointer<WGPUCommandBufferImpl> commandBuffer,
);

typedef _c_wgpuCommandBufferRelease = ffi.Void Function(
  ffi.Pointer<WGPUCommandBufferImpl> commandBuffer,
);

typedef _dart_wgpuCommandBufferRelease = void Function(
  ffi.Pointer<WGPUCommandBufferImpl> commandBuffer,
);

typedef _c_wgpuCommandEncoderBeginComputePass
    = ffi.Pointer<WGPUComputePassEncoderImpl> Function(
  ffi.Pointer<WGPUCommandEncoderImpl> commandEncoder,
  ffi.Pointer<WGPUComputePassDescriptor> descriptor,
);

typedef _dart_wgpuCommandEncoderBeginComputePass
    = ffi.Pointer<WGPUComputePassEncoderImpl> Function(
  ffi.Pointer<WGPUCommandEncoderImpl> commandEncoder,
  ffi.Pointer<WGPUComputePassDescriptor> descriptor,
);

typedef _c_wgpuCommandEncoderBeginRenderPass
    = ffi.Pointer<WGPURenderPassEncoderImpl> Function(
  ffi.Pointer<WGPUCommandEncoderImpl> commandEncoder,
  ffi.Pointer<WGPURenderPassDescriptor> descriptor,
);

typedef _dart_wgpuCommandEncoderBeginRenderPass
    = ffi.Pointer<WGPURenderPassEncoderImpl> Function(
  ffi.Pointer<WGPUCommandEncoderImpl> commandEncoder,
  ffi.Pointer<WGPURenderPassDescriptor> descriptor,
);

typedef _c_wgpuCommandEncoderCopyBufferToBuffer = ffi.Void Function(
  ffi.Pointer<WGPUCommandEncoderImpl> commandEncoder,
  ffi.Pointer<WGPUBufferImpl> source,
  ffi.Uint64 sourceOffset,
  ffi.Pointer<WGPUBufferImpl> destination,
  ffi.Uint64 destinationOffset,
  ffi.Uint64 size,
);

typedef _dart_wgpuCommandEncoderCopyBufferToBuffer = void Function(
  ffi.Pointer<WGPUCommandEncoderImpl> commandEncoder,
  ffi.Pointer<WGPUBufferImpl> source,
  int sourceOffset,
  ffi.Pointer<WGPUBufferImpl> destination,
  int destinationOffset,
  int size,
);

typedef _c_wgpuCommandEncoderCopyBufferToTexture = ffi.Void Function(
  ffi.Pointer<WGPUCommandEncoderImpl> commandEncoder,
  ffi.Pointer<WGPUBufferCopyView> source,
  ffi.Pointer<WGPUTextureCopyView> destination,
  ffi.Pointer<WGPUExtent3D> copySize,
);

typedef _dart_wgpuCommandEncoderCopyBufferToTexture = void Function(
  ffi.Pointer<WGPUCommandEncoderImpl> commandEncoder,
  ffi.Pointer<WGPUBufferCopyView> source,
  ffi.Pointer<WGPUTextureCopyView> destination,
  ffi.Pointer<WGPUExtent3D> copySize,
);

typedef _c_wgpuCommandEncoderCopyTextureToBuffer = ffi.Void Function(
  ffi.Pointer<WGPUCommandEncoderImpl> commandEncoder,
  ffi.Pointer<WGPUTextureCopyView> source,
  ffi.Pointer<WGPUBufferCopyView> destination,
  ffi.Pointer<WGPUExtent3D> copySize,
);

typedef _dart_wgpuCommandEncoderCopyTextureToBuffer = void Function(
  ffi.Pointer<WGPUCommandEncoderImpl> commandEncoder,
  ffi.Pointer<WGPUTextureCopyView> source,
  ffi.Pointer<WGPUBufferCopyView> destination,
  ffi.Pointer<WGPUExtent3D> copySize,
);

typedef _c_wgpuCommandEncoderCopyTextureToTexture = ffi.Void Function(
  ffi.Pointer<WGPUCommandEncoderImpl> commandEncoder,
  ffi.Pointer<WGPUTextureCopyView> source,
  ffi.Pointer<WGPUTextureCopyView> destination,
  ffi.Pointer<WGPUExtent3D> copySize,
);

typedef _dart_wgpuCommandEncoderCopyTextureToTexture = void Function(
  ffi.Pointer<WGPUCommandEncoderImpl> commandEncoder,
  ffi.Pointer<WGPUTextureCopyView> source,
  ffi.Pointer<WGPUTextureCopyView> destination,
  ffi.Pointer<WGPUExtent3D> copySize,
);

typedef _c_wgpuCommandEncoderFinish = ffi.Pointer<WGPUCommandBufferImpl>
    Function(
  ffi.Pointer<WGPUCommandEncoderImpl> commandEncoder,
  ffi.Pointer<WGPUCommandBufferDescriptor> descriptor,
);

typedef _dart_wgpuCommandEncoderFinish = ffi.Pointer<WGPUCommandBufferImpl>
    Function(
  ffi.Pointer<WGPUCommandEncoderImpl> commandEncoder,
  ffi.Pointer<WGPUCommandBufferDescriptor> descriptor,
);

typedef _c_wgpuCommandEncoderInjectValidationError = ffi.Void Function(
  ffi.Pointer<WGPUCommandEncoderImpl> commandEncoder,
  ffi.Pointer<ffi.Int8> message,
);

typedef _dart_wgpuCommandEncoderInjectValidationError = void Function(
  ffi.Pointer<WGPUCommandEncoderImpl> commandEncoder,
  ffi.Pointer<ffi.Int8> message,
);

typedef _c_wgpuCommandEncoderInsertDebugMarker = ffi.Void Function(
  ffi.Pointer<WGPUCommandEncoderImpl> commandEncoder,
  ffi.Pointer<ffi.Int8> markerLabel,
);

typedef _dart_wgpuCommandEncoderInsertDebugMarker = void Function(
  ffi.Pointer<WGPUCommandEncoderImpl> commandEncoder,
  ffi.Pointer<ffi.Int8> markerLabel,
);

typedef _c_wgpuCommandEncoderPopDebugGroup = ffi.Void Function(
  ffi.Pointer<WGPUCommandEncoderImpl> commandEncoder,
);

typedef _dart_wgpuCommandEncoderPopDebugGroup = void Function(
  ffi.Pointer<WGPUCommandEncoderImpl> commandEncoder,
);

typedef _c_wgpuCommandEncoderPushDebugGroup = ffi.Void Function(
  ffi.Pointer<WGPUCommandEncoderImpl> commandEncoder,
  ffi.Pointer<ffi.Int8> groupLabel,
);

typedef _dart_wgpuCommandEncoderPushDebugGroup = void Function(
  ffi.Pointer<WGPUCommandEncoderImpl> commandEncoder,
  ffi.Pointer<ffi.Int8> groupLabel,
);

typedef _c_wgpuCommandEncoderResolveQuerySet = ffi.Void Function(
  ffi.Pointer<WGPUCommandEncoderImpl> commandEncoder,
  ffi.Pointer<WGPUQuerySetImpl> querySet,
  ffi.Uint32 firstQuery,
  ffi.Uint32 queryCount,
  ffi.Pointer<WGPUBufferImpl> destination,
  ffi.Uint64 destinationOffset,
);

typedef _dart_wgpuCommandEncoderResolveQuerySet = void Function(
  ffi.Pointer<WGPUCommandEncoderImpl> commandEncoder,
  ffi.Pointer<WGPUQuerySetImpl> querySet,
  int firstQuery,
  int queryCount,
  ffi.Pointer<WGPUBufferImpl> destination,
  int destinationOffset,
);

typedef _c_wgpuCommandEncoderWriteTimestamp = ffi.Void Function(
  ffi.Pointer<WGPUCommandEncoderImpl> commandEncoder,
  ffi.Pointer<WGPUQuerySetImpl> querySet,
  ffi.Uint32 queryIndex,
);

typedef _dart_wgpuCommandEncoderWriteTimestamp = void Function(
  ffi.Pointer<WGPUCommandEncoderImpl> commandEncoder,
  ffi.Pointer<WGPUQuerySetImpl> querySet,
  int queryIndex,
);

typedef _c_wgpuCommandEncoderReference = ffi.Void Function(
  ffi.Pointer<WGPUCommandEncoderImpl> commandEncoder,
);

typedef _dart_wgpuCommandEncoderReference = void Function(
  ffi.Pointer<WGPUCommandEncoderImpl> commandEncoder,
);

typedef _c_wgpuCommandEncoderRelease = ffi.Void Function(
  ffi.Pointer<WGPUCommandEncoderImpl> commandEncoder,
);

typedef _dart_wgpuCommandEncoderRelease = void Function(
  ffi.Pointer<WGPUCommandEncoderImpl> commandEncoder,
);

typedef _c_wgpuComputePassEncoderDispatch = ffi.Void Function(
  ffi.Pointer<WGPUComputePassEncoderImpl> computePassEncoder,
  ffi.Uint32 x,
  ffi.Uint32 y,
  ffi.Uint32 z,
);

typedef _dart_wgpuComputePassEncoderDispatch = void Function(
  ffi.Pointer<WGPUComputePassEncoderImpl> computePassEncoder,
  int x,
  int y,
  int z,
);

typedef _c_wgpuComputePassEncoderDispatchIndirect = ffi.Void Function(
  ffi.Pointer<WGPUComputePassEncoderImpl> computePassEncoder,
  ffi.Pointer<WGPUBufferImpl> indirectBuffer,
  ffi.Uint64 indirectOffset,
);

typedef _dart_wgpuComputePassEncoderDispatchIndirect = void Function(
  ffi.Pointer<WGPUComputePassEncoderImpl> computePassEncoder,
  ffi.Pointer<WGPUBufferImpl> indirectBuffer,
  int indirectOffset,
);

typedef _c_wgpuComputePassEncoderEndPass = ffi.Void Function(
  ffi.Pointer<WGPUComputePassEncoderImpl> computePassEncoder,
);

typedef _dart_wgpuComputePassEncoderEndPass = void Function(
  ffi.Pointer<WGPUComputePassEncoderImpl> computePassEncoder,
);

typedef _c_wgpuComputePassEncoderInsertDebugMarker = ffi.Void Function(
  ffi.Pointer<WGPUComputePassEncoderImpl> computePassEncoder,
  ffi.Pointer<ffi.Int8> markerLabel,
);

typedef _dart_wgpuComputePassEncoderInsertDebugMarker = void Function(
  ffi.Pointer<WGPUComputePassEncoderImpl> computePassEncoder,
  ffi.Pointer<ffi.Int8> markerLabel,
);

typedef _c_wgpuComputePassEncoderPopDebugGroup = ffi.Void Function(
  ffi.Pointer<WGPUComputePassEncoderImpl> computePassEncoder,
);

typedef _dart_wgpuComputePassEncoderPopDebugGroup = void Function(
  ffi.Pointer<WGPUComputePassEncoderImpl> computePassEncoder,
);

typedef _c_wgpuComputePassEncoderPushDebugGroup = ffi.Void Function(
  ffi.Pointer<WGPUComputePassEncoderImpl> computePassEncoder,
  ffi.Pointer<ffi.Int8> groupLabel,
);

typedef _dart_wgpuComputePassEncoderPushDebugGroup = void Function(
  ffi.Pointer<WGPUComputePassEncoderImpl> computePassEncoder,
  ffi.Pointer<ffi.Int8> groupLabel,
);

typedef _c_wgpuComputePassEncoderSetBindGroup = ffi.Void Function(
  ffi.Pointer<WGPUComputePassEncoderImpl> computePassEncoder,
  ffi.Uint32 groupIndex,
  ffi.Pointer<WGPUBindGroupImpl> group,
  ffi.Uint32 dynamicOffsetCount,
  ffi.Pointer<ffi.Uint32> dynamicOffsets,
);

typedef _dart_wgpuComputePassEncoderSetBindGroup = void Function(
  ffi.Pointer<WGPUComputePassEncoderImpl> computePassEncoder,
  int groupIndex,
  ffi.Pointer<WGPUBindGroupImpl> group,
  int dynamicOffsetCount,
  ffi.Pointer<ffi.Uint32> dynamicOffsets,
);

typedef _c_wgpuComputePassEncoderSetPipeline = ffi.Void Function(
  ffi.Pointer<WGPUComputePassEncoderImpl> computePassEncoder,
  ffi.Pointer<WGPUComputePipelineImpl> pipeline,
);

typedef _dart_wgpuComputePassEncoderSetPipeline = void Function(
  ffi.Pointer<WGPUComputePassEncoderImpl> computePassEncoder,
  ffi.Pointer<WGPUComputePipelineImpl> pipeline,
);

typedef _c_wgpuComputePassEncoderWriteTimestamp = ffi.Void Function(
  ffi.Pointer<WGPUComputePassEncoderImpl> computePassEncoder,
  ffi.Pointer<WGPUQuerySetImpl> querySet,
  ffi.Uint32 queryIndex,
);

typedef _dart_wgpuComputePassEncoderWriteTimestamp = void Function(
  ffi.Pointer<WGPUComputePassEncoderImpl> computePassEncoder,
  ffi.Pointer<WGPUQuerySetImpl> querySet,
  int queryIndex,
);

typedef _c_wgpuComputePassEncoderReference = ffi.Void Function(
  ffi.Pointer<WGPUComputePassEncoderImpl> computePassEncoder,
);

typedef _dart_wgpuComputePassEncoderReference = void Function(
  ffi.Pointer<WGPUComputePassEncoderImpl> computePassEncoder,
);

typedef _c_wgpuComputePassEncoderRelease = ffi.Void Function(
  ffi.Pointer<WGPUComputePassEncoderImpl> computePassEncoder,
);

typedef _dart_wgpuComputePassEncoderRelease = void Function(
  ffi.Pointer<WGPUComputePassEncoderImpl> computePassEncoder,
);

typedef _c_wgpuComputePipelineGetBindGroupLayout
    = ffi.Pointer<WGPUBindGroupLayoutImpl> Function(
  ffi.Pointer<WGPUComputePipelineImpl> computePipeline,
  ffi.Uint32 groupIndex,
);

typedef _dart_wgpuComputePipelineGetBindGroupLayout
    = ffi.Pointer<WGPUBindGroupLayoutImpl> Function(
  ffi.Pointer<WGPUComputePipelineImpl> computePipeline,
  int groupIndex,
);

typedef _c_wgpuComputePipelineReference = ffi.Void Function(
  ffi.Pointer<WGPUComputePipelineImpl> computePipeline,
);

typedef _dart_wgpuComputePipelineReference = void Function(
  ffi.Pointer<WGPUComputePipelineImpl> computePipeline,
);

typedef _c_wgpuComputePipelineRelease = ffi.Void Function(
  ffi.Pointer<WGPUComputePipelineImpl> computePipeline,
);

typedef _dart_wgpuComputePipelineRelease = void Function(
  ffi.Pointer<WGPUComputePipelineImpl> computePipeline,
);

typedef _c_wgpuDeviceCreateBindGroup = ffi.Pointer<WGPUBindGroupImpl> Function(
  ffi.Pointer<WGPUDeviceImpl> device,
  ffi.Pointer<WGPUBindGroupDescriptor> descriptor,
);

typedef _dart_wgpuDeviceCreateBindGroup = ffi.Pointer<WGPUBindGroupImpl>
    Function(
  ffi.Pointer<WGPUDeviceImpl> device,
  ffi.Pointer<WGPUBindGroupDescriptor> descriptor,
);

typedef _c_wgpuDeviceCreateBindGroupLayout
    = ffi.Pointer<WGPUBindGroupLayoutImpl> Function(
  ffi.Pointer<WGPUDeviceImpl> device,
  ffi.Pointer<WGPUBindGroupLayoutDescriptor> descriptor,
);

typedef _dart_wgpuDeviceCreateBindGroupLayout
    = ffi.Pointer<WGPUBindGroupLayoutImpl> Function(
  ffi.Pointer<WGPUDeviceImpl> device,
  ffi.Pointer<WGPUBindGroupLayoutDescriptor> descriptor,
);

typedef _c_wgpuDeviceCreateBuffer = ffi.Pointer<WGPUBufferImpl> Function(
  ffi.Pointer<WGPUDeviceImpl> device,
  ffi.Pointer<WGPUBufferDescriptor> descriptor,
);

typedef _dart_wgpuDeviceCreateBuffer = ffi.Pointer<WGPUBufferImpl> Function(
  ffi.Pointer<WGPUDeviceImpl> device,
  ffi.Pointer<WGPUBufferDescriptor> descriptor,
);

typedef _c_wgpuDeviceCreateCommandEncoder = ffi.Pointer<WGPUCommandEncoderImpl>
    Function(
  ffi.Pointer<WGPUDeviceImpl> device,
  ffi.Pointer<WGPUCommandEncoderDescriptor> descriptor,
);

typedef _dart_wgpuDeviceCreateCommandEncoder
    = ffi.Pointer<WGPUCommandEncoderImpl> Function(
  ffi.Pointer<WGPUDeviceImpl> device,
  ffi.Pointer<WGPUCommandEncoderDescriptor> descriptor,
);

typedef _c_wgpuDeviceCreateComputePipeline
    = ffi.Pointer<WGPUComputePipelineImpl> Function(
  ffi.Pointer<WGPUDeviceImpl> device,
  ffi.Pointer<WGPUComputePipelineDescriptor> descriptor,
);

typedef _dart_wgpuDeviceCreateComputePipeline
    = ffi.Pointer<WGPUComputePipelineImpl> Function(
  ffi.Pointer<WGPUDeviceImpl> device,
  ffi.Pointer<WGPUComputePipelineDescriptor> descriptor,
);

typedef _c_wgpuDeviceCreateErrorBuffer = ffi.Pointer<WGPUBufferImpl> Function(
  ffi.Pointer<WGPUDeviceImpl> device,
);

typedef _dart_wgpuDeviceCreateErrorBuffer = ffi.Pointer<WGPUBufferImpl>
    Function(
  ffi.Pointer<WGPUDeviceImpl> device,
);

typedef _c_wgpuDeviceCreatePipelineLayout = ffi.Pointer<WGPUPipelineLayoutImpl>
    Function(
  ffi.Pointer<WGPUDeviceImpl> device,
  ffi.Pointer<WGPUPipelineLayoutDescriptor> descriptor,
);

typedef _dart_wgpuDeviceCreatePipelineLayout
    = ffi.Pointer<WGPUPipelineLayoutImpl> Function(
  ffi.Pointer<WGPUDeviceImpl> device,
  ffi.Pointer<WGPUPipelineLayoutDescriptor> descriptor,
);

typedef _c_wgpuDeviceCreateQuerySet = ffi.Pointer<WGPUQuerySetImpl> Function(
  ffi.Pointer<WGPUDeviceImpl> device,
  ffi.Pointer<WGPUQuerySetDescriptor> descriptor,
);

typedef _dart_wgpuDeviceCreateQuerySet = ffi.Pointer<WGPUQuerySetImpl> Function(
  ffi.Pointer<WGPUDeviceImpl> device,
  ffi.Pointer<WGPUQuerySetDescriptor> descriptor,
);

typedef WGPUCreateReadyComputePipelineCallback = ffi.Void Function(
  ffi.Int32,
  ffi.Pointer<WGPUComputePipelineImpl>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Void>,
);

typedef _c_wgpuDeviceCreateReadyComputePipeline = ffi.Void Function(
  ffi.Pointer<WGPUDeviceImpl> device,
  ffi.Pointer<WGPUComputePipelineDescriptor> descriptor,
  ffi.Pointer<ffi.NativeFunction<WGPUCreateReadyComputePipelineCallback>>
      callback,
  ffi.Pointer<ffi.Void> userdata,
);

typedef _dart_wgpuDeviceCreateReadyComputePipeline = void Function(
  ffi.Pointer<WGPUDeviceImpl> device,
  ffi.Pointer<WGPUComputePipelineDescriptor> descriptor,
  ffi.Pointer<ffi.NativeFunction<WGPUCreateReadyComputePipelineCallback>>
      callback,
  ffi.Pointer<ffi.Void> userdata,
);

typedef WGPUCreateReadyRenderPipelineCallback = ffi.Void Function(
  ffi.Int32,
  ffi.Pointer<WGPURenderPipelineImpl>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Void>,
);

typedef _c_wgpuDeviceCreateReadyRenderPipeline = ffi.Void Function(
  ffi.Pointer<WGPUDeviceImpl> device,
  ffi.Pointer<WGPURenderPipelineDescriptor> descriptor,
  ffi.Pointer<ffi.NativeFunction<WGPUCreateReadyRenderPipelineCallback>>
      callback,
  ffi.Pointer<ffi.Void> userdata,
);

typedef _dart_wgpuDeviceCreateReadyRenderPipeline = void Function(
  ffi.Pointer<WGPUDeviceImpl> device,
  ffi.Pointer<WGPURenderPipelineDescriptor> descriptor,
  ffi.Pointer<ffi.NativeFunction<WGPUCreateReadyRenderPipelineCallback>>
      callback,
  ffi.Pointer<ffi.Void> userdata,
);

typedef _c_wgpuDeviceCreateRenderBundleEncoder
    = ffi.Pointer<WGPURenderBundleEncoderImpl> Function(
  ffi.Pointer<WGPUDeviceImpl> device,
  ffi.Pointer<WGPURenderBundleEncoderDescriptor> descriptor,
);

typedef _dart_wgpuDeviceCreateRenderBundleEncoder
    = ffi.Pointer<WGPURenderBundleEncoderImpl> Function(
  ffi.Pointer<WGPUDeviceImpl> device,
  ffi.Pointer<WGPURenderBundleEncoderDescriptor> descriptor,
);

typedef _c_wgpuDeviceCreateRenderPipeline = ffi.Pointer<WGPURenderPipelineImpl>
    Function(
  ffi.Pointer<WGPUDeviceImpl> device,
  ffi.Pointer<WGPURenderPipelineDescriptor> descriptor,
);

typedef _dart_wgpuDeviceCreateRenderPipeline
    = ffi.Pointer<WGPURenderPipelineImpl> Function(
  ffi.Pointer<WGPUDeviceImpl> device,
  ffi.Pointer<WGPURenderPipelineDescriptor> descriptor,
);

typedef _c_wgpuDeviceCreateSampler = ffi.Pointer<WGPUSamplerImpl> Function(
  ffi.Pointer<WGPUDeviceImpl> device,
  ffi.Pointer<WGPUSamplerDescriptor> descriptor,
);

typedef _dart_wgpuDeviceCreateSampler = ffi.Pointer<WGPUSamplerImpl> Function(
  ffi.Pointer<WGPUDeviceImpl> device,
  ffi.Pointer<WGPUSamplerDescriptor> descriptor,
);

typedef _c_wgpuDeviceCreateShaderModule = ffi.Pointer<WGPUShaderModuleImpl>
    Function(
  ffi.Pointer<WGPUDeviceImpl> device,
  ffi.Pointer<WGPUShaderModuleDescriptor> descriptor,
);

typedef _dart_wgpuDeviceCreateShaderModule = ffi.Pointer<WGPUShaderModuleImpl>
    Function(
  ffi.Pointer<WGPUDeviceImpl> device,
  ffi.Pointer<WGPUShaderModuleDescriptor> descriptor,
);

typedef _c_wgpuDeviceCreateSwapChain = ffi.Pointer<WGPUSwapChainImpl> Function(
  ffi.Pointer<WGPUDeviceImpl> device,
  ffi.Pointer<WGPUSurfaceImpl> surface,
  ffi.Pointer<WGPUSwapChainDescriptor> descriptor,
);

typedef _dart_wgpuDeviceCreateSwapChain = ffi.Pointer<WGPUSwapChainImpl>
    Function(
  ffi.Pointer<WGPUDeviceImpl> device,
  ffi.Pointer<WGPUSurfaceImpl> surface,
  ffi.Pointer<WGPUSwapChainDescriptor> descriptor,
);

typedef _c_wgpuDeviceCreateTexture = ffi.Pointer<WGPUTextureImpl> Function(
  ffi.Pointer<WGPUDeviceImpl> device,
  ffi.Pointer<WGPUTextureDescriptor> descriptor,
);

typedef _dart_wgpuDeviceCreateTexture = ffi.Pointer<WGPUTextureImpl> Function(
  ffi.Pointer<WGPUDeviceImpl> device,
  ffi.Pointer<WGPUTextureDescriptor> descriptor,
);

typedef _c_wgpuDeviceGetDefaultQueue = ffi.Pointer<WGPUQueueImpl> Function(
  ffi.Pointer<WGPUDeviceImpl> device,
);

typedef _dart_wgpuDeviceGetDefaultQueue = ffi.Pointer<WGPUQueueImpl> Function(
  ffi.Pointer<WGPUDeviceImpl> device,
);

typedef _c_wgpuDeviceInjectError = ffi.Void Function(
  ffi.Pointer<WGPUDeviceImpl> device,
  ffi.Int32 type,
  ffi.Pointer<ffi.Int8> message,
);

typedef _dart_wgpuDeviceInjectError = void Function(
  ffi.Pointer<WGPUDeviceImpl> device,
  int type,
  ffi.Pointer<ffi.Int8> message,
);

typedef _c_wgpuDeviceLoseForTesting = ffi.Void Function(
  ffi.Pointer<WGPUDeviceImpl> device,
);

typedef _dart_wgpuDeviceLoseForTesting = void Function(
  ffi.Pointer<WGPUDeviceImpl> device,
);

typedef WGPUErrorCallback = ffi.Void Function(
  ffi.Int32,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Void>,
);

typedef _c_wgpuDevicePopErrorScope = ffi.Uint8 Function(
  ffi.Pointer<WGPUDeviceImpl> device,
  ffi.Pointer<ffi.NativeFunction<WGPUErrorCallback>> callback,
  ffi.Pointer<ffi.Void> userdata,
);

typedef _dart_wgpuDevicePopErrorScope = int Function(
  ffi.Pointer<WGPUDeviceImpl> device,
  ffi.Pointer<ffi.NativeFunction<WGPUErrorCallback>> callback,
  ffi.Pointer<ffi.Void> userdata,
);

typedef _c_wgpuDevicePushErrorScope = ffi.Void Function(
  ffi.Pointer<WGPUDeviceImpl> device,
  ffi.Int32 filter,
);

typedef _dart_wgpuDevicePushErrorScope = void Function(
  ffi.Pointer<WGPUDeviceImpl> device,
  int filter,
);

typedef WGPUDeviceLostCallback = ffi.Void Function(
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Void>,
);

typedef _c_wgpuDeviceSetDeviceLostCallback = ffi.Void Function(
  ffi.Pointer<WGPUDeviceImpl> device,
  ffi.Pointer<ffi.NativeFunction<WGPUDeviceLostCallback>> callback,
  ffi.Pointer<ffi.Void> userdata,
);

typedef _dart_wgpuDeviceSetDeviceLostCallback = void Function(
  ffi.Pointer<WGPUDeviceImpl> device,
  ffi.Pointer<ffi.NativeFunction<WGPUDeviceLostCallback>> callback,
  ffi.Pointer<ffi.Void> userdata,
);

typedef _c_wgpuDeviceSetUncapturedErrorCallback = ffi.Void Function(
  ffi.Pointer<WGPUDeviceImpl> device,
  ffi.Pointer<ffi.NativeFunction<WGPUErrorCallback>> callback,
  ffi.Pointer<ffi.Void> userdata,
);

typedef _dart_wgpuDeviceSetUncapturedErrorCallback = void Function(
  ffi.Pointer<WGPUDeviceImpl> device,
  ffi.Pointer<ffi.NativeFunction<WGPUErrorCallback>> callback,
  ffi.Pointer<ffi.Void> userdata,
);

typedef _c_wgpuDeviceTick = ffi.Void Function(
  ffi.Pointer<WGPUDeviceImpl> device,
);

typedef _dart_wgpuDeviceTick = void Function(
  ffi.Pointer<WGPUDeviceImpl> device,
);

typedef _c_wgpuDeviceReference = ffi.Void Function(
  ffi.Pointer<WGPUDeviceImpl> device,
);

typedef _dart_wgpuDeviceReference = void Function(
  ffi.Pointer<WGPUDeviceImpl> device,
);

typedef _c_wgpuDeviceRelease = ffi.Void Function(
  ffi.Pointer<WGPUDeviceImpl> device,
);

typedef _dart_wgpuDeviceRelease = void Function(
  ffi.Pointer<WGPUDeviceImpl> device,
);

typedef _c_wgpuFenceGetCompletedValue = ffi.Uint64 Function(
  ffi.Pointer<WGPUFenceImpl> fence,
);

typedef _dart_wgpuFenceGetCompletedValue = int Function(
  ffi.Pointer<WGPUFenceImpl> fence,
);

typedef WGPUFenceOnCompletionCallback = ffi.Void Function(
  ffi.Int32,
  ffi.Pointer<ffi.Void>,
);

typedef _c_wgpuFenceOnCompletion = ffi.Void Function(
  ffi.Pointer<WGPUFenceImpl> fence,
  ffi.Uint64 value,
  ffi.Pointer<ffi.NativeFunction<WGPUFenceOnCompletionCallback>> callback,
  ffi.Pointer<ffi.Void> userdata,
);

typedef _dart_wgpuFenceOnCompletion = void Function(
  ffi.Pointer<WGPUFenceImpl> fence,
  int value,
  ffi.Pointer<ffi.NativeFunction<WGPUFenceOnCompletionCallback>> callback,
  ffi.Pointer<ffi.Void> userdata,
);

typedef _c_wgpuFenceReference = ffi.Void Function(
  ffi.Pointer<WGPUFenceImpl> fence,
);

typedef _dart_wgpuFenceReference = void Function(
  ffi.Pointer<WGPUFenceImpl> fence,
);

typedef _c_wgpuFenceRelease = ffi.Void Function(
  ffi.Pointer<WGPUFenceImpl> fence,
);

typedef _dart_wgpuFenceRelease = void Function(
  ffi.Pointer<WGPUFenceImpl> fence,
);

typedef _c_wgpuInstanceCreateSurface = ffi.Pointer<WGPUSurfaceImpl> Function(
  ffi.Pointer<WGPUInstanceImpl> instance,
  ffi.Pointer<WGPUSurfaceDescriptor> descriptor,
);

typedef _dart_wgpuInstanceCreateSurface = ffi.Pointer<WGPUSurfaceImpl> Function(
  ffi.Pointer<WGPUInstanceImpl> instance,
  ffi.Pointer<WGPUSurfaceDescriptor> descriptor,
);

typedef _c_wgpuInstanceReference = ffi.Void Function(
  ffi.Pointer<WGPUInstanceImpl> instance,
);

typedef _dart_wgpuInstanceReference = void Function(
  ffi.Pointer<WGPUInstanceImpl> instance,
);

typedef _c_wgpuInstanceRelease = ffi.Void Function(
  ffi.Pointer<WGPUInstanceImpl> instance,
);

typedef _dart_wgpuInstanceRelease = void Function(
  ffi.Pointer<WGPUInstanceImpl> instance,
);

typedef _c_wgpuPipelineLayoutReference = ffi.Void Function(
  ffi.Pointer<WGPUPipelineLayoutImpl> pipelineLayout,
);

typedef _dart_wgpuPipelineLayoutReference = void Function(
  ffi.Pointer<WGPUPipelineLayoutImpl> pipelineLayout,
);

typedef _c_wgpuPipelineLayoutRelease = ffi.Void Function(
  ffi.Pointer<WGPUPipelineLayoutImpl> pipelineLayout,
);

typedef _dart_wgpuPipelineLayoutRelease = void Function(
  ffi.Pointer<WGPUPipelineLayoutImpl> pipelineLayout,
);

typedef _c_wgpuQuerySetDestroy = ffi.Void Function(
  ffi.Pointer<WGPUQuerySetImpl> querySet,
);

typedef _dart_wgpuQuerySetDestroy = void Function(
  ffi.Pointer<WGPUQuerySetImpl> querySet,
);

typedef _c_wgpuQuerySetReference = ffi.Void Function(
  ffi.Pointer<WGPUQuerySetImpl> querySet,
);

typedef _dart_wgpuQuerySetReference = void Function(
  ffi.Pointer<WGPUQuerySetImpl> querySet,
);

typedef _c_wgpuQuerySetRelease = ffi.Void Function(
  ffi.Pointer<WGPUQuerySetImpl> querySet,
);

typedef _dart_wgpuQuerySetRelease = void Function(
  ffi.Pointer<WGPUQuerySetImpl> querySet,
);

typedef _c_wgpuQueueCopyTextureForBrowser = ffi.Void Function(
  ffi.Pointer<WGPUQueueImpl> queue,
  ffi.Pointer<WGPUTextureCopyView> source,
  ffi.Pointer<WGPUTextureCopyView> destination,
  ffi.Pointer<WGPUExtent3D> copySize,
  ffi.Pointer<WGPUCopyTextureForBrowserOptions> options,
);

typedef _dart_wgpuQueueCopyTextureForBrowser = void Function(
  ffi.Pointer<WGPUQueueImpl> queue,
  ffi.Pointer<WGPUTextureCopyView> source,
  ffi.Pointer<WGPUTextureCopyView> destination,
  ffi.Pointer<WGPUExtent3D> copySize,
  ffi.Pointer<WGPUCopyTextureForBrowserOptions> options,
);

typedef _c_wgpuQueueCreateFence = ffi.Pointer<WGPUFenceImpl> Function(
  ffi.Pointer<WGPUQueueImpl> queue,
  ffi.Pointer<WGPUFenceDescriptor> descriptor,
);

typedef _dart_wgpuQueueCreateFence = ffi.Pointer<WGPUFenceImpl> Function(
  ffi.Pointer<WGPUQueueImpl> queue,
  ffi.Pointer<WGPUFenceDescriptor> descriptor,
);

typedef _c_wgpuQueueSignal = ffi.Void Function(
  ffi.Pointer<WGPUQueueImpl> queue,
  ffi.Pointer<WGPUFenceImpl> fence,
  ffi.Uint64 signalValue,
);

typedef _dart_wgpuQueueSignal = void Function(
  ffi.Pointer<WGPUQueueImpl> queue,
  ffi.Pointer<WGPUFenceImpl> fence,
  int signalValue,
);

typedef _c_wgpuQueueSubmit = ffi.Void Function(
  ffi.Pointer<WGPUQueueImpl> queue,
  ffi.Uint32 commandCount,
  ffi.Pointer<ffi.Pointer<WGPUCommandBufferImpl>> commands,
);

typedef _dart_wgpuQueueSubmit = void Function(
  ffi.Pointer<WGPUQueueImpl> queue,
  int commandCount,
  ffi.Pointer<ffi.Pointer<WGPUCommandBufferImpl>> commands,
);

typedef _c_wgpuQueueWriteBuffer = ffi.Void Function(
  ffi.Pointer<WGPUQueueImpl> queue,
  ffi.Pointer<WGPUBufferImpl> buffer,
  ffi.Uint64 bufferOffset,
  ffi.Pointer<ffi.Void> data,
  ffi.Uint64 size,
);

typedef _dart_wgpuQueueWriteBuffer = void Function(
  ffi.Pointer<WGPUQueueImpl> queue,
  ffi.Pointer<WGPUBufferImpl> buffer,
  int bufferOffset,
  ffi.Pointer<ffi.Void> data,
  int size,
);

typedef _c_wgpuQueueWriteTexture = ffi.Void Function(
  ffi.Pointer<WGPUQueueImpl> queue,
  ffi.Pointer<WGPUTextureCopyView> destination,
  ffi.Pointer<ffi.Void> data,
  ffi.Uint64 dataSize,
  ffi.Pointer<WGPUTextureDataLayout> dataLayout,
  ffi.Pointer<WGPUExtent3D> writeSize,
);

typedef _dart_wgpuQueueWriteTexture = void Function(
  ffi.Pointer<WGPUQueueImpl> queue,
  ffi.Pointer<WGPUTextureCopyView> destination,
  ffi.Pointer<ffi.Void> data,
  int dataSize,
  ffi.Pointer<WGPUTextureDataLayout> dataLayout,
  ffi.Pointer<WGPUExtent3D> writeSize,
);

typedef _c_wgpuQueueReference = ffi.Void Function(
  ffi.Pointer<WGPUQueueImpl> queue,
);

typedef _dart_wgpuQueueReference = void Function(
  ffi.Pointer<WGPUQueueImpl> queue,
);

typedef _c_wgpuQueueRelease = ffi.Void Function(
  ffi.Pointer<WGPUQueueImpl> queue,
);

typedef _dart_wgpuQueueRelease = void Function(
  ffi.Pointer<WGPUQueueImpl> queue,
);

typedef _c_wgpuRenderBundleReference = ffi.Void Function(
  ffi.Pointer<WGPURenderBundleImpl> renderBundle,
);

typedef _dart_wgpuRenderBundleReference = void Function(
  ffi.Pointer<WGPURenderBundleImpl> renderBundle,
);

typedef _c_wgpuRenderBundleRelease = ffi.Void Function(
  ffi.Pointer<WGPURenderBundleImpl> renderBundle,
);

typedef _dart_wgpuRenderBundleRelease = void Function(
  ffi.Pointer<WGPURenderBundleImpl> renderBundle,
);

typedef _c_wgpuRenderBundleEncoderDraw = ffi.Void Function(
  ffi.Pointer<WGPURenderBundleEncoderImpl> renderBundleEncoder,
  ffi.Uint32 vertexCount,
  ffi.Uint32 instanceCount,
  ffi.Uint32 firstVertex,
  ffi.Uint32 firstInstance,
);

typedef _dart_wgpuRenderBundleEncoderDraw = void Function(
  ffi.Pointer<WGPURenderBundleEncoderImpl> renderBundleEncoder,
  int vertexCount,
  int instanceCount,
  int firstVertex,
  int firstInstance,
);

typedef _c_wgpuRenderBundleEncoderDrawIndexed = ffi.Void Function(
  ffi.Pointer<WGPURenderBundleEncoderImpl> renderBundleEncoder,
  ffi.Uint32 indexCount,
  ffi.Uint32 instanceCount,
  ffi.Uint32 firstIndex,
  ffi.Int32 baseVertex,
  ffi.Uint32 firstInstance,
);

typedef _dart_wgpuRenderBundleEncoderDrawIndexed = void Function(
  ffi.Pointer<WGPURenderBundleEncoderImpl> renderBundleEncoder,
  int indexCount,
  int instanceCount,
  int firstIndex,
  int baseVertex,
  int firstInstance,
);

typedef _c_wgpuRenderBundleEncoderDrawIndexedIndirect = ffi.Void Function(
  ffi.Pointer<WGPURenderBundleEncoderImpl> renderBundleEncoder,
  ffi.Pointer<WGPUBufferImpl> indirectBuffer,
  ffi.Uint64 indirectOffset,
);

typedef _dart_wgpuRenderBundleEncoderDrawIndexedIndirect = void Function(
  ffi.Pointer<WGPURenderBundleEncoderImpl> renderBundleEncoder,
  ffi.Pointer<WGPUBufferImpl> indirectBuffer,
  int indirectOffset,
);

typedef _c_wgpuRenderBundleEncoderDrawIndirect = ffi.Void Function(
  ffi.Pointer<WGPURenderBundleEncoderImpl> renderBundleEncoder,
  ffi.Pointer<WGPUBufferImpl> indirectBuffer,
  ffi.Uint64 indirectOffset,
);

typedef _dart_wgpuRenderBundleEncoderDrawIndirect = void Function(
  ffi.Pointer<WGPURenderBundleEncoderImpl> renderBundleEncoder,
  ffi.Pointer<WGPUBufferImpl> indirectBuffer,
  int indirectOffset,
);

typedef _c_wgpuRenderBundleEncoderFinish = ffi.Pointer<WGPURenderBundleImpl>
    Function(
  ffi.Pointer<WGPURenderBundleEncoderImpl> renderBundleEncoder,
  ffi.Pointer<WGPURenderBundleDescriptor> descriptor,
);

typedef _dart_wgpuRenderBundleEncoderFinish = ffi.Pointer<WGPURenderBundleImpl>
    Function(
  ffi.Pointer<WGPURenderBundleEncoderImpl> renderBundleEncoder,
  ffi.Pointer<WGPURenderBundleDescriptor> descriptor,
);

typedef _c_wgpuRenderBundleEncoderInsertDebugMarker = ffi.Void Function(
  ffi.Pointer<WGPURenderBundleEncoderImpl> renderBundleEncoder,
  ffi.Pointer<ffi.Int8> markerLabel,
);

typedef _dart_wgpuRenderBundleEncoderInsertDebugMarker = void Function(
  ffi.Pointer<WGPURenderBundleEncoderImpl> renderBundleEncoder,
  ffi.Pointer<ffi.Int8> markerLabel,
);

typedef _c_wgpuRenderBundleEncoderPopDebugGroup = ffi.Void Function(
  ffi.Pointer<WGPURenderBundleEncoderImpl> renderBundleEncoder,
);

typedef _dart_wgpuRenderBundleEncoderPopDebugGroup = void Function(
  ffi.Pointer<WGPURenderBundleEncoderImpl> renderBundleEncoder,
);

typedef _c_wgpuRenderBundleEncoderPushDebugGroup = ffi.Void Function(
  ffi.Pointer<WGPURenderBundleEncoderImpl> renderBundleEncoder,
  ffi.Pointer<ffi.Int8> groupLabel,
);

typedef _dart_wgpuRenderBundleEncoderPushDebugGroup = void Function(
  ffi.Pointer<WGPURenderBundleEncoderImpl> renderBundleEncoder,
  ffi.Pointer<ffi.Int8> groupLabel,
);

typedef _c_wgpuRenderBundleEncoderSetBindGroup = ffi.Void Function(
  ffi.Pointer<WGPURenderBundleEncoderImpl> renderBundleEncoder,
  ffi.Uint32 groupIndex,
  ffi.Pointer<WGPUBindGroupImpl> group,
  ffi.Uint32 dynamicOffsetCount,
  ffi.Pointer<ffi.Uint32> dynamicOffsets,
);

typedef _dart_wgpuRenderBundleEncoderSetBindGroup = void Function(
  ffi.Pointer<WGPURenderBundleEncoderImpl> renderBundleEncoder,
  int groupIndex,
  ffi.Pointer<WGPUBindGroupImpl> group,
  int dynamicOffsetCount,
  ffi.Pointer<ffi.Uint32> dynamicOffsets,
);

typedef _c_wgpuRenderBundleEncoderSetIndexBuffer = ffi.Void Function(
  ffi.Pointer<WGPURenderBundleEncoderImpl> renderBundleEncoder,
  ffi.Pointer<WGPUBufferImpl> buffer,
  ffi.Int32 format,
  ffi.Uint64 offset,
  ffi.Uint64 size,
);

typedef _dart_wgpuRenderBundleEncoderSetIndexBuffer = void Function(
  ffi.Pointer<WGPURenderBundleEncoderImpl> renderBundleEncoder,
  ffi.Pointer<WGPUBufferImpl> buffer,
  int format,
  int offset,
  int size,
);

typedef _c_wgpuRenderBundleEncoderSetIndexBufferWithFormat = ffi.Void Function(
  ffi.Pointer<WGPURenderBundleEncoderImpl> renderBundleEncoder,
  ffi.Pointer<WGPUBufferImpl> buffer,
  ffi.Int32 format,
  ffi.Uint64 offset,
  ffi.Uint64 size,
);

typedef _dart_wgpuRenderBundleEncoderSetIndexBufferWithFormat = void Function(
  ffi.Pointer<WGPURenderBundleEncoderImpl> renderBundleEncoder,
  ffi.Pointer<WGPUBufferImpl> buffer,
  int format,
  int offset,
  int size,
);

typedef _c_wgpuRenderBundleEncoderSetPipeline = ffi.Void Function(
  ffi.Pointer<WGPURenderBundleEncoderImpl> renderBundleEncoder,
  ffi.Pointer<WGPURenderPipelineImpl> pipeline,
);

typedef _dart_wgpuRenderBundleEncoderSetPipeline = void Function(
  ffi.Pointer<WGPURenderBundleEncoderImpl> renderBundleEncoder,
  ffi.Pointer<WGPURenderPipelineImpl> pipeline,
);

typedef _c_wgpuRenderBundleEncoderSetVertexBuffer = ffi.Void Function(
  ffi.Pointer<WGPURenderBundleEncoderImpl> renderBundleEncoder,
  ffi.Uint32 slot,
  ffi.Pointer<WGPUBufferImpl> buffer,
  ffi.Uint64 offset,
  ffi.Uint64 size,
);

typedef _dart_wgpuRenderBundleEncoderSetVertexBuffer = void Function(
  ffi.Pointer<WGPURenderBundleEncoderImpl> renderBundleEncoder,
  int slot,
  ffi.Pointer<WGPUBufferImpl> buffer,
  int offset,
  int size,
);

typedef _c_wgpuRenderBundleEncoderReference = ffi.Void Function(
  ffi.Pointer<WGPURenderBundleEncoderImpl> renderBundleEncoder,
);

typedef _dart_wgpuRenderBundleEncoderReference = void Function(
  ffi.Pointer<WGPURenderBundleEncoderImpl> renderBundleEncoder,
);

typedef _c_wgpuRenderBundleEncoderRelease = ffi.Void Function(
  ffi.Pointer<WGPURenderBundleEncoderImpl> renderBundleEncoder,
);

typedef _dart_wgpuRenderBundleEncoderRelease = void Function(
  ffi.Pointer<WGPURenderBundleEncoderImpl> renderBundleEncoder,
);

typedef _c_wgpuRenderPassEncoderBeginOcclusionQuery = ffi.Void Function(
  ffi.Pointer<WGPURenderPassEncoderImpl> renderPassEncoder,
  ffi.Uint32 queryIndex,
);

typedef _dart_wgpuRenderPassEncoderBeginOcclusionQuery = void Function(
  ffi.Pointer<WGPURenderPassEncoderImpl> renderPassEncoder,
  int queryIndex,
);

typedef _c_wgpuRenderPassEncoderDraw = ffi.Void Function(
  ffi.Pointer<WGPURenderPassEncoderImpl> renderPassEncoder,
  ffi.Uint32 vertexCount,
  ffi.Uint32 instanceCount,
  ffi.Uint32 firstVertex,
  ffi.Uint32 firstInstance,
);

typedef _dart_wgpuRenderPassEncoderDraw = void Function(
  ffi.Pointer<WGPURenderPassEncoderImpl> renderPassEncoder,
  int vertexCount,
  int instanceCount,
  int firstVertex,
  int firstInstance,
);

typedef _c_wgpuRenderPassEncoderDrawIndexed = ffi.Void Function(
  ffi.Pointer<WGPURenderPassEncoderImpl> renderPassEncoder,
  ffi.Uint32 indexCount,
  ffi.Uint32 instanceCount,
  ffi.Uint32 firstIndex,
  ffi.Int32 baseVertex,
  ffi.Uint32 firstInstance,
);

typedef _dart_wgpuRenderPassEncoderDrawIndexed = void Function(
  ffi.Pointer<WGPURenderPassEncoderImpl> renderPassEncoder,
  int indexCount,
  int instanceCount,
  int firstIndex,
  int baseVertex,
  int firstInstance,
);

typedef _c_wgpuRenderPassEncoderDrawIndexedIndirect = ffi.Void Function(
  ffi.Pointer<WGPURenderPassEncoderImpl> renderPassEncoder,
  ffi.Pointer<WGPUBufferImpl> indirectBuffer,
  ffi.Uint64 indirectOffset,
);

typedef _dart_wgpuRenderPassEncoderDrawIndexedIndirect = void Function(
  ffi.Pointer<WGPURenderPassEncoderImpl> renderPassEncoder,
  ffi.Pointer<WGPUBufferImpl> indirectBuffer,
  int indirectOffset,
);

typedef _c_wgpuRenderPassEncoderDrawIndirect = ffi.Void Function(
  ffi.Pointer<WGPURenderPassEncoderImpl> renderPassEncoder,
  ffi.Pointer<WGPUBufferImpl> indirectBuffer,
  ffi.Uint64 indirectOffset,
);

typedef _dart_wgpuRenderPassEncoderDrawIndirect = void Function(
  ffi.Pointer<WGPURenderPassEncoderImpl> renderPassEncoder,
  ffi.Pointer<WGPUBufferImpl> indirectBuffer,
  int indirectOffset,
);

typedef _c_wgpuRenderPassEncoderEndOcclusionQuery = ffi.Void Function(
  ffi.Pointer<WGPURenderPassEncoderImpl> renderPassEncoder,
);

typedef _dart_wgpuRenderPassEncoderEndOcclusionQuery = void Function(
  ffi.Pointer<WGPURenderPassEncoderImpl> renderPassEncoder,
);

typedef _c_wgpuRenderPassEncoderEndPass = ffi.Void Function(
  ffi.Pointer<WGPURenderPassEncoderImpl> renderPassEncoder,
);

typedef _dart_wgpuRenderPassEncoderEndPass = void Function(
  ffi.Pointer<WGPURenderPassEncoderImpl> renderPassEncoder,
);

typedef _c_wgpuRenderPassEncoderExecuteBundles = ffi.Void Function(
  ffi.Pointer<WGPURenderPassEncoderImpl> renderPassEncoder,
  ffi.Uint32 bundlesCount,
  ffi.Pointer<ffi.Pointer<WGPURenderBundleImpl>> bundles,
);

typedef _dart_wgpuRenderPassEncoderExecuteBundles = void Function(
  ffi.Pointer<WGPURenderPassEncoderImpl> renderPassEncoder,
  int bundlesCount,
  ffi.Pointer<ffi.Pointer<WGPURenderBundleImpl>> bundles,
);

typedef _c_wgpuRenderPassEncoderInsertDebugMarker = ffi.Void Function(
  ffi.Pointer<WGPURenderPassEncoderImpl> renderPassEncoder,
  ffi.Pointer<ffi.Int8> markerLabel,
);

typedef _dart_wgpuRenderPassEncoderInsertDebugMarker = void Function(
  ffi.Pointer<WGPURenderPassEncoderImpl> renderPassEncoder,
  ffi.Pointer<ffi.Int8> markerLabel,
);

typedef _c_wgpuRenderPassEncoderPopDebugGroup = ffi.Void Function(
  ffi.Pointer<WGPURenderPassEncoderImpl> renderPassEncoder,
);

typedef _dart_wgpuRenderPassEncoderPopDebugGroup = void Function(
  ffi.Pointer<WGPURenderPassEncoderImpl> renderPassEncoder,
);

typedef _c_wgpuRenderPassEncoderPushDebugGroup = ffi.Void Function(
  ffi.Pointer<WGPURenderPassEncoderImpl> renderPassEncoder,
  ffi.Pointer<ffi.Int8> groupLabel,
);

typedef _dart_wgpuRenderPassEncoderPushDebugGroup = void Function(
  ffi.Pointer<WGPURenderPassEncoderImpl> renderPassEncoder,
  ffi.Pointer<ffi.Int8> groupLabel,
);

typedef _c_wgpuRenderPassEncoderSetBindGroup = ffi.Void Function(
  ffi.Pointer<WGPURenderPassEncoderImpl> renderPassEncoder,
  ffi.Uint32 groupIndex,
  ffi.Pointer<WGPUBindGroupImpl> group,
  ffi.Uint32 dynamicOffsetCount,
  ffi.Pointer<ffi.Uint32> dynamicOffsets,
);

typedef _dart_wgpuRenderPassEncoderSetBindGroup = void Function(
  ffi.Pointer<WGPURenderPassEncoderImpl> renderPassEncoder,
  int groupIndex,
  ffi.Pointer<WGPUBindGroupImpl> group,
  int dynamicOffsetCount,
  ffi.Pointer<ffi.Uint32> dynamicOffsets,
);

typedef _c_wgpuRenderPassEncoderSetBlendColor = ffi.Void Function(
  ffi.Pointer<WGPURenderPassEncoderImpl> renderPassEncoder,
  ffi.Pointer<WGPUColor> color,
);

typedef _dart_wgpuRenderPassEncoderSetBlendColor = void Function(
  ffi.Pointer<WGPURenderPassEncoderImpl> renderPassEncoder,
  ffi.Pointer<WGPUColor> color,
);

typedef _c_wgpuRenderPassEncoderSetIndexBuffer = ffi.Void Function(
  ffi.Pointer<WGPURenderPassEncoderImpl> renderPassEncoder,
  ffi.Pointer<WGPUBufferImpl> buffer,
  ffi.Int32 format,
  ffi.Uint64 offset,
  ffi.Uint64 size,
);

typedef _dart_wgpuRenderPassEncoderSetIndexBuffer = void Function(
  ffi.Pointer<WGPURenderPassEncoderImpl> renderPassEncoder,
  ffi.Pointer<WGPUBufferImpl> buffer,
  int format,
  int offset,
  int size,
);

typedef _c_wgpuRenderPassEncoderSetIndexBufferWithFormat = ffi.Void Function(
  ffi.Pointer<WGPURenderPassEncoderImpl> renderPassEncoder,
  ffi.Pointer<WGPUBufferImpl> buffer,
  ffi.Int32 format,
  ffi.Uint64 offset,
  ffi.Uint64 size,
);

typedef _dart_wgpuRenderPassEncoderSetIndexBufferWithFormat = void Function(
  ffi.Pointer<WGPURenderPassEncoderImpl> renderPassEncoder,
  ffi.Pointer<WGPUBufferImpl> buffer,
  int format,
  int offset,
  int size,
);

typedef _c_wgpuRenderPassEncoderSetPipeline = ffi.Void Function(
  ffi.Pointer<WGPURenderPassEncoderImpl> renderPassEncoder,
  ffi.Pointer<WGPURenderPipelineImpl> pipeline,
);

typedef _dart_wgpuRenderPassEncoderSetPipeline = void Function(
  ffi.Pointer<WGPURenderPassEncoderImpl> renderPassEncoder,
  ffi.Pointer<WGPURenderPipelineImpl> pipeline,
);

typedef _c_wgpuRenderPassEncoderSetScissorRect = ffi.Void Function(
  ffi.Pointer<WGPURenderPassEncoderImpl> renderPassEncoder,
  ffi.Uint32 x,
  ffi.Uint32 y,
  ffi.Uint32 width,
  ffi.Uint32 height,
);

typedef _dart_wgpuRenderPassEncoderSetScissorRect = void Function(
  ffi.Pointer<WGPURenderPassEncoderImpl> renderPassEncoder,
  int x,
  int y,
  int width,
  int height,
);

typedef _c_wgpuRenderPassEncoderSetStencilReference = ffi.Void Function(
  ffi.Pointer<WGPURenderPassEncoderImpl> renderPassEncoder,
  ffi.Uint32 reference,
);

typedef _dart_wgpuRenderPassEncoderSetStencilReference = void Function(
  ffi.Pointer<WGPURenderPassEncoderImpl> renderPassEncoder,
  int reference,
);

typedef _c_wgpuRenderPassEncoderSetVertexBuffer = ffi.Void Function(
  ffi.Pointer<WGPURenderPassEncoderImpl> renderPassEncoder,
  ffi.Uint32 slot,
  ffi.Pointer<WGPUBufferImpl> buffer,
  ffi.Uint64 offset,
  ffi.Uint64 size,
);

typedef _dart_wgpuRenderPassEncoderSetVertexBuffer = void Function(
  ffi.Pointer<WGPURenderPassEncoderImpl> renderPassEncoder,
  int slot,
  ffi.Pointer<WGPUBufferImpl> buffer,
  int offset,
  int size,
);

typedef _c_wgpuRenderPassEncoderSetViewport = ffi.Void Function(
  ffi.Pointer<WGPURenderPassEncoderImpl> renderPassEncoder,
  ffi.Float x,
  ffi.Float y,
  ffi.Float width,
  ffi.Float height,
  ffi.Float minDepth,
  ffi.Float maxDepth,
);

typedef _dart_wgpuRenderPassEncoderSetViewport = void Function(
  ffi.Pointer<WGPURenderPassEncoderImpl> renderPassEncoder,
  double x,
  double y,
  double width,
  double height,
  double minDepth,
  double maxDepth,
);

typedef _c_wgpuRenderPassEncoderWriteTimestamp = ffi.Void Function(
  ffi.Pointer<WGPURenderPassEncoderImpl> renderPassEncoder,
  ffi.Pointer<WGPUQuerySetImpl> querySet,
  ffi.Uint32 queryIndex,
);

typedef _dart_wgpuRenderPassEncoderWriteTimestamp = void Function(
  ffi.Pointer<WGPURenderPassEncoderImpl> renderPassEncoder,
  ffi.Pointer<WGPUQuerySetImpl> querySet,
  int queryIndex,
);

typedef _c_wgpuRenderPassEncoderReference = ffi.Void Function(
  ffi.Pointer<WGPURenderPassEncoderImpl> renderPassEncoder,
);

typedef _dart_wgpuRenderPassEncoderReference = void Function(
  ffi.Pointer<WGPURenderPassEncoderImpl> renderPassEncoder,
);

typedef _c_wgpuRenderPassEncoderRelease = ffi.Void Function(
  ffi.Pointer<WGPURenderPassEncoderImpl> renderPassEncoder,
);

typedef _dart_wgpuRenderPassEncoderRelease = void Function(
  ffi.Pointer<WGPURenderPassEncoderImpl> renderPassEncoder,
);

typedef _c_wgpuRenderPipelineGetBindGroupLayout
    = ffi.Pointer<WGPUBindGroupLayoutImpl> Function(
  ffi.Pointer<WGPURenderPipelineImpl> renderPipeline,
  ffi.Uint32 groupIndex,
);

typedef _dart_wgpuRenderPipelineGetBindGroupLayout
    = ffi.Pointer<WGPUBindGroupLayoutImpl> Function(
  ffi.Pointer<WGPURenderPipelineImpl> renderPipeline,
  int groupIndex,
);

typedef _c_wgpuRenderPipelineReference = ffi.Void Function(
  ffi.Pointer<WGPURenderPipelineImpl> renderPipeline,
);

typedef _dart_wgpuRenderPipelineReference = void Function(
  ffi.Pointer<WGPURenderPipelineImpl> renderPipeline,
);

typedef _c_wgpuRenderPipelineRelease = ffi.Void Function(
  ffi.Pointer<WGPURenderPipelineImpl> renderPipeline,
);

typedef _dart_wgpuRenderPipelineRelease = void Function(
  ffi.Pointer<WGPURenderPipelineImpl> renderPipeline,
);

typedef _c_wgpuSamplerReference = ffi.Void Function(
  ffi.Pointer<WGPUSamplerImpl> sampler,
);

typedef _dart_wgpuSamplerReference = void Function(
  ffi.Pointer<WGPUSamplerImpl> sampler,
);

typedef _c_wgpuSamplerRelease = ffi.Void Function(
  ffi.Pointer<WGPUSamplerImpl> sampler,
);

typedef _dart_wgpuSamplerRelease = void Function(
  ffi.Pointer<WGPUSamplerImpl> sampler,
);

typedef _c_wgpuShaderModuleReference = ffi.Void Function(
  ffi.Pointer<WGPUShaderModuleImpl> shaderModule,
);

typedef _dart_wgpuShaderModuleReference = void Function(
  ffi.Pointer<WGPUShaderModuleImpl> shaderModule,
);

typedef _c_wgpuShaderModuleRelease = ffi.Void Function(
  ffi.Pointer<WGPUShaderModuleImpl> shaderModule,
);

typedef _dart_wgpuShaderModuleRelease = void Function(
  ffi.Pointer<WGPUShaderModuleImpl> shaderModule,
);

typedef _c_wgpuSurfaceReference = ffi.Void Function(
  ffi.Pointer<WGPUSurfaceImpl> surface,
);

typedef _dart_wgpuSurfaceReference = void Function(
  ffi.Pointer<WGPUSurfaceImpl> surface,
);

typedef _c_wgpuSurfaceRelease = ffi.Void Function(
  ffi.Pointer<WGPUSurfaceImpl> surface,
);

typedef _dart_wgpuSurfaceRelease = void Function(
  ffi.Pointer<WGPUSurfaceImpl> surface,
);

typedef _c_wgpuSwapChainConfigure = ffi.Void Function(
  ffi.Pointer<WGPUSwapChainImpl> swapChain,
  ffi.Int32 format,
  ffi.Uint32 allowedUsage,
  ffi.Uint32 width,
  ffi.Uint32 height,
);

typedef _dart_wgpuSwapChainConfigure = void Function(
  ffi.Pointer<WGPUSwapChainImpl> swapChain,
  int format,
  int allowedUsage,
  int width,
  int height,
);

typedef _c_wgpuSwapChainGetCurrentTextureView = ffi.Pointer<WGPUTextureViewImpl>
    Function(
  ffi.Pointer<WGPUSwapChainImpl> swapChain,
);

typedef _dart_wgpuSwapChainGetCurrentTextureView
    = ffi.Pointer<WGPUTextureViewImpl> Function(
  ffi.Pointer<WGPUSwapChainImpl> swapChain,
);

typedef _c_wgpuSwapChainPresent = ffi.Void Function(
  ffi.Pointer<WGPUSwapChainImpl> swapChain,
);

typedef _dart_wgpuSwapChainPresent = void Function(
  ffi.Pointer<WGPUSwapChainImpl> swapChain,
);

typedef _c_wgpuSwapChainReference = ffi.Void Function(
  ffi.Pointer<WGPUSwapChainImpl> swapChain,
);

typedef _dart_wgpuSwapChainReference = void Function(
  ffi.Pointer<WGPUSwapChainImpl> swapChain,
);

typedef _c_wgpuSwapChainRelease = ffi.Void Function(
  ffi.Pointer<WGPUSwapChainImpl> swapChain,
);

typedef _dart_wgpuSwapChainRelease = void Function(
  ffi.Pointer<WGPUSwapChainImpl> swapChain,
);

typedef _c_wgpuTextureCreateView = ffi.Pointer<WGPUTextureViewImpl> Function(
  ffi.Pointer<WGPUTextureImpl> texture,
  ffi.Pointer<WGPUTextureViewDescriptor> descriptor,
);

typedef _dart_wgpuTextureCreateView = ffi.Pointer<WGPUTextureViewImpl> Function(
  ffi.Pointer<WGPUTextureImpl> texture,
  ffi.Pointer<WGPUTextureViewDescriptor> descriptor,
);

typedef _c_wgpuTextureDestroy = ffi.Void Function(
  ffi.Pointer<WGPUTextureImpl> texture,
);

typedef _dart_wgpuTextureDestroy = void Function(
  ffi.Pointer<WGPUTextureImpl> texture,
);

typedef _c_wgpuTextureReference = ffi.Void Function(
  ffi.Pointer<WGPUTextureImpl> texture,
);

typedef _dart_wgpuTextureReference = void Function(
  ffi.Pointer<WGPUTextureImpl> texture,
);

typedef _c_wgpuTextureRelease = ffi.Void Function(
  ffi.Pointer<WGPUTextureImpl> texture,
);

typedef _dart_wgpuTextureRelease = void Function(
  ffi.Pointer<WGPUTextureImpl> texture,
);

typedef _c_wgpuTextureViewReference = ffi.Void Function(
  ffi.Pointer<WGPUTextureViewImpl> textureView,
);

typedef _dart_wgpuTextureViewReference = void Function(
  ffi.Pointer<WGPUTextureViewImpl> textureView,
);

typedef _c_wgpuTextureViewRelease = ffi.Void Function(
  ffi.Pointer<WGPUTextureViewImpl> textureView,
);

typedef _dart_wgpuTextureViewRelease = void Function(
  ffi.Pointer<WGPUTextureViewImpl> textureView,
);
